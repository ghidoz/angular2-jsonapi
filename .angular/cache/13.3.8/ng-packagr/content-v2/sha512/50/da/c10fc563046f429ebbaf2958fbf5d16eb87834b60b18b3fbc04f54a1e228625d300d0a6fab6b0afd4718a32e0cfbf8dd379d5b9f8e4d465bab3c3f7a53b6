{"hash":"168f0bd14da1304e4c0eb22d7969eb498ad297e3","fesm2020":{"code":"import { parseISO } from 'date-fns';\nimport * as _ from 'lodash';\nimport { includes, find } from 'lodash';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpErrorResponse, HttpHeaders, HttpClientModule } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport { of, throwError } from 'rxjs';\nimport * as qs from 'qs';\nimport 'reflect-metadata';\n\nclass JsonApiNestedModel {\n    constructor(data) {\n        this.nestedDataSerialization = false;\n        if (data) {\n            Object.assign(this, data);\n        }\n    }\n    get modelConfig() {\n        return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n    }\n    fill(data) {\n        Object.assign(this, data);\n    }\n    serialize() {\n        return this.transformSerializedNamesToPropertyNames();\n    }\n    transformSerializedNamesToPropertyNames() {\n        const serializedNameToPropertyName = this.getModelPropertyNames();\n        const properties = {};\n        Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n            if (this && this[serializedName] !== null &&\n                this[serializedName] !== undefined && serializedName !== 'nestedDataSerialization') {\n                properties[serializedNameToPropertyName[serializedName]] = this[serializedName];\n            }\n        });\n        return properties;\n    }\n    getModelPropertyNames() {\n        return Reflect.getMetadata('AttributeMapping', this) || [];\n    }\n}\n\nconst DEFAULT_OPTIONS = {\n    nullValue: false,\n    hasMany: false\n};\nclass JsonModelConverter {\n    constructor(model, options = {}) {\n        this.modelType = model; // <ModelType<T>>model\n        this.options = { ...DEFAULT_OPTIONS, ...options };\n    }\n    mask(value) {\n        if (!value && !this.options.nullValue) {\n            if (this.options.hasMany) {\n                return [];\n            }\n            return new this.modelType();\n        }\n        let result = null;\n        if (this.options.hasMany) {\n            if (!Array.isArray(value)) {\n                throw new Error(`ERROR: JsonModelConverter: Expected array but got ${typeof value}.`);\n            }\n            result = [];\n            for (const item of value) {\n                if (item === null) {\n                    continue;\n                }\n                let temp;\n                if (typeof item === 'object') {\n                    temp = new this.modelType();\n                    temp.fill(item);\n                }\n                else {\n                    temp = item;\n                }\n                result.push(temp);\n            }\n        }\n        else {\n            if (!(value instanceof this.modelType)) {\n                result = new this.modelType();\n                result.fill(value);\n            }\n            else {\n                result = value;\n            }\n        }\n        return result;\n    }\n    unmask(value) {\n        if (!value) {\n            return value;\n        }\n        let result = null;\n        if (Array.isArray(value)) {\n            result = [];\n            for (const item of value) {\n                if (!item) {\n                    continue;\n                }\n                if (item instanceof JsonApiNestedModel) {\n                    item.nestedDataSerialization = true;\n                    result.push(item.serialize());\n                    item.nestedDataSerialization = false;\n                }\n                else {\n                    result.push(item);\n                }\n            }\n        }\n        else {\n            if (value instanceof JsonApiNestedModel) {\n                value.nestedDataSerialization = true;\n                result = value.serialize();\n                value.nestedDataSerialization = false;\n            }\n            else {\n                result = value;\n            }\n        }\n        return result;\n    }\n}\n\nfunction HasMany(config = {}) {\n    return (target, propertyName) => {\n        const annotations = Reflect.getMetadata('HasMany', target) || [];\n        annotations.push({\n            propertyName,\n            relationship: config.key || propertyName\n        });\n        Reflect.defineMetadata('HasMany', annotations, target);\n    };\n}\n\nfunction BelongsTo(config = {}) {\n    return (target, propertyName) => {\n        const annotations = Reflect.getMetadata('BelongsTo', target) || [];\n        annotations.push({\n            propertyName,\n            relationship: config.key || propertyName\n        });\n        Reflect.defineMetadata('BelongsTo', annotations, target);\n    };\n}\n\n// tslint:disable-next-line:variable-name\nconst AttributeMetadata = Symbol('AttributeMetadata');\n\nclass DateConverter {\n    mask(value) {\n        if (typeof value === 'string') {\n            return parseISO(value);\n        }\n        else {\n            return value;\n        }\n    }\n    unmask(value) {\n        if (value === null) {\n            return null;\n        }\n        return value.toISOString();\n    }\n}\n\nfunction Attribute(options = {}) {\n    return (target, propertyName) => {\n        const converter = (dataType, value, forSerialisation = false) => {\n            let attrConverter;\n            if (options.converter) {\n                attrConverter = options.converter;\n            }\n            else if (dataType === Date) {\n                attrConverter = new DateConverter();\n            }\n            else {\n                const datatype = new dataType();\n                if (datatype.mask && datatype.unmask) {\n                    attrConverter = datatype;\n                }\n            }\n            if (attrConverter) {\n                if (!forSerialisation) {\n                    return attrConverter.mask(value);\n                }\n                return attrConverter.unmask(value);\n            }\n            return value;\n        };\n        const saveAnnotations = () => {\n            const metadata = Reflect.getMetadata('Attribute', target) || {};\n            metadata[propertyName] = {\n                marked: true\n            };\n            Reflect.defineMetadata('Attribute', metadata, target);\n            const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n            const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n            mappingMetadata[serializedPropertyName] = propertyName;\n            Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n        };\n        const setMetadata = (instance, oldValue, newValue) => {\n            const targetType = Reflect.getMetadata('design:type', target, propertyName);\n            if (!instance[AttributeMetadata]) {\n                instance[AttributeMetadata] = {};\n            }\n            instance[AttributeMetadata][propertyName] = {\n                newValue,\n                oldValue,\n                nested: false,\n                serializedName: options.serializedName,\n                hasDirtyAttributes: !_.isEqual(oldValue, newValue),\n                serialisationValue: converter(targetType, newValue, true)\n            };\n        };\n        const getter = function () {\n            return this[`_${propertyName}`];\n        };\n        const setter = function (newVal) {\n            const targetType = Reflect.getMetadata('design:type', target, propertyName);\n            const convertedValue = converter(targetType, newVal);\n            let oldValue = null;\n            if (this.isModelInitialization() && this.id) {\n                oldValue = converter(targetType, newVal);\n            }\n            else {\n                if (this[AttributeMetadata] && this[AttributeMetadata][propertyName]) {\n                    oldValue = this[AttributeMetadata][propertyName].oldValue;\n                }\n            }\n            this[`_${propertyName}`] = convertedValue;\n            setMetadata(this, oldValue, convertedValue);\n        };\n        if (delete target[propertyName]) {\n            saveAnnotations();\n            Object.defineProperty(target, propertyName, {\n                get: getter,\n                set: setter,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    };\n}\n\nfunction NestedAttribute(options = {}) {\n    return (target, propertyName) => {\n        const converter = (dataType, value, forSerialisation = false) => {\n            let attrConverter;\n            if (options.converter) {\n                attrConverter = options.converter;\n            }\n            else {\n                const datatype = new dataType();\n                if (datatype.mask && datatype.unmask) {\n                    attrConverter = datatype;\n                }\n            }\n            if (attrConverter) {\n                if (!forSerialisation) {\n                    return attrConverter.mask(value);\n                }\n                return attrConverter.unmask(value);\n            }\n            return value;\n        };\n        const saveAnnotations = () => {\n            const metadata = Reflect.getMetadata('NestedAttribute', target) || {};\n            metadata[propertyName] = {\n                marked: true\n            };\n            Reflect.defineMetadata('NestedAttribute', metadata, target);\n            const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n            const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n            mappingMetadata[serializedPropertyName] = propertyName;\n            Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n        };\n        const updateMetadata = (instance) => {\n            const newValue = instance[`_${propertyName}`];\n            if (!instance[AttributeMetadata]) {\n                instance[AttributeMetadata] = {};\n            }\n            if (instance[AttributeMetadata][propertyName] && !instance.isModelInitialization()) {\n                instance[AttributeMetadata][propertyName].newValue = newValue;\n                instance[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(instance[AttributeMetadata][propertyName].oldValue, newValue);\n                instance[AttributeMetadata][propertyName].serialisationValue = newValue;\n            }\n            else {\n                const oldValue = _.cloneDeep(newValue);\n                instance[AttributeMetadata][propertyName] = {\n                    newValue,\n                    oldValue,\n                    converter,\n                    nested: true,\n                    hasDirtyAttributes: !_.isEqual(newValue, oldValue)\n                };\n            }\n        };\n        const getter = function () {\n            return this[`_${propertyName}`];\n        };\n        const setter = function (newVal) {\n            const targetType = Reflect.getMetadata('design:type', target, propertyName);\n            this[`_${propertyName}`] = converter(targetType, newVal);\n            updateMetadata(this);\n        };\n        if (delete target[propertyName]) {\n            saveAnnotations();\n            Object.defineProperty(target, propertyName, {\n                get: getter,\n                set: setter,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    };\n}\n\nfunction JsonAttribute(options = {}) {\n    return (target, propertyName) => {\n        const converter = (dataType, value, forSerialisation = false) => {\n            let attrConverter;\n            if (options.converter) {\n                attrConverter = options.converter;\n            }\n            else if (dataType === Date) {\n                attrConverter = new DateConverter();\n            }\n            else {\n                const datatype = new dataType();\n                if (datatype.mask && datatype.unmask) {\n                    attrConverter = datatype;\n                }\n            }\n            if (attrConverter) {\n                if (!forSerialisation) {\n                    return attrConverter.mask(value);\n                }\n                return attrConverter.unmask(value);\n            }\n            return value;\n        };\n        const saveAnnotations = () => {\n            const metadata = Reflect.getMetadata('JsonAttribute', target) || {};\n            metadata[propertyName] = {\n                marked: true\n            };\n            Reflect.defineMetadata('JsonAttribute', metadata, target);\n            const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n            const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n            mappingMetadata[serializedPropertyName] = propertyName;\n            Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n        };\n        const getter = function () {\n            if (this.nestedDataSerialization) {\n                return converter(Reflect.getMetadata('design:type', target, propertyName), this[`_${propertyName}`], true);\n            }\n            return this[`_${propertyName}`];\n        };\n        const setter = function (newVal) {\n            const targetType = Reflect.getMetadata('design:type', target, propertyName);\n            this[`_${propertyName}`] = converter(targetType, newVal);\n        };\n        if (delete target[propertyName]) {\n            saveAnnotations();\n            Object.defineProperty(target, propertyName, {\n                get: getter,\n                set: setter,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    };\n}\n\nclass JsonApiMetaModel {\n    constructor(response) {\n        this.links = response.links || [];\n        this.meta = response.meta;\n    }\n}\n\nfunction JsonApiModelConfig(config) {\n    return (target) => {\n        if (typeof config.meta === 'undefined' || config.meta == null) {\n            config.meta = JsonApiMetaModel;\n        }\n        Reflect.defineMetadata('JsonApiModelConfig', config, target);\n    };\n}\n\nfunction JsonApiDatastoreConfig(config = {}) {\n    return (target) => {\n        Reflect.defineMetadata('JsonApiDatastoreConfig', config, target);\n    };\n}\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex$1 = AttributeMetadata;\nclass JsonApiModel {\n    constructor(internalDatastore, data) {\n        this.internalDatastore = internalDatastore;\n        this.modelInitialization = false;\n        if (data) {\n            this.modelInitialization = true;\n            this.id = data.id;\n            Object.assign(this, data.attributes);\n            this.modelInitialization = false;\n        }\n    }\n    isModelInitialization() {\n        return this.modelInitialization;\n    }\n    syncRelationships(data, included, remainingModels) {\n        if (this.lastSyncModels === included) {\n            return;\n        }\n        if (data) {\n            let modelsForProcessing = remainingModels;\n            if (modelsForProcessing === undefined) {\n                modelsForProcessing = [].concat(included);\n            }\n            this.parseHasMany(data, included, modelsForProcessing);\n            this.parseBelongsTo(data, included, modelsForProcessing);\n        }\n        this.lastSyncModels = included;\n    }\n    save(params, headers, customUrl) {\n        this.checkChanges();\n        const attributesMetadata = this[AttributeMetadataIndex$1];\n        return this.internalDatastore.saveRecord(attributesMetadata, this, params, headers, customUrl);\n    }\n    get hasDirtyAttributes() {\n        this.checkChanges();\n        const attributesMetadata = this[AttributeMetadataIndex$1];\n        let hasDirtyAttributes = false;\n        for (const propertyName in attributesMetadata) {\n            if (attributesMetadata.hasOwnProperty(propertyName)) {\n                const metadata = attributesMetadata[propertyName];\n                if (metadata.hasDirtyAttributes) {\n                    hasDirtyAttributes = true;\n                    break;\n                }\n            }\n        }\n        return hasDirtyAttributes;\n    }\n    checkChanges() {\n        const attributesMetadata = this[AttributeMetadata];\n        for (const propertyName in attributesMetadata) {\n            if (attributesMetadata.hasOwnProperty(propertyName)) {\n                const metadata = attributesMetadata[propertyName];\n                if (metadata.nested) {\n                    this[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(attributesMetadata[propertyName].oldValue, attributesMetadata[propertyName].newValue);\n                    this[AttributeMetadata][propertyName].serialisationValue = attributesMetadata[propertyName].converter(Reflect.getMetadata('design:type', this, propertyName), _.cloneDeep(attributesMetadata[propertyName].newValue), true);\n                }\n            }\n        }\n    }\n    rollbackAttributes() {\n        const attributesMetadata = this[AttributeMetadataIndex$1];\n        for (const propertyName in attributesMetadata) {\n            if (attributesMetadata.hasOwnProperty(propertyName)) {\n                if (attributesMetadata[propertyName].hasDirtyAttributes) {\n                    this[propertyName] = _.cloneDeep(attributesMetadata[propertyName].oldValue);\n                }\n            }\n        }\n    }\n    get modelConfig() {\n        return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n    }\n    parseHasMany(data, included, remainingModels) {\n        const hasMany = Reflect.getMetadata('HasMany', this);\n        if (hasMany) {\n            for (const metadata of hasMany) {\n                const relationship = data.relationships ? data.relationships[metadata.relationship] : null;\n                if (relationship && relationship.data && Array.isArray(relationship.data)) {\n                    let allModels = [];\n                    const modelTypesFetched = [];\n                    for (const typeIndex of Object.keys(relationship.data)) {\n                        const typeName = relationship.data[typeIndex].type;\n                        if (!includes(modelTypesFetched, typeName)) {\n                            modelTypesFetched.push(typeName);\n                            // tslint:disable-next-line:max-line-length\n                            const modelType = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n                            if (modelType) {\n                                const relationshipModels = this.getHasManyRelationship(modelType, relationship.data, included, typeName, remainingModels);\n                                if (relationshipModels.length > 0) {\n                                    allModels = allModels.concat(relationshipModels);\n                                }\n                            }\n                            else {\n                                throw { message: `parseHasMany - Model type for relationship ${typeName} not found.` };\n                            }\n                        }\n                    }\n                    this[metadata.propertyName] = allModels;\n                }\n            }\n        }\n    }\n    parseBelongsTo(data, included, remainingModels) {\n        const belongsTo = Reflect.getMetadata('BelongsTo', this);\n        if (belongsTo) {\n            for (const metadata of belongsTo) {\n                const relationship = data.relationships ? data.relationships[metadata.relationship] : null;\n                if (relationship && relationship.data) {\n                    const dataRelationship = (relationship.data instanceof Array) ? relationship.data[0] : relationship.data;\n                    if (dataRelationship) {\n                        const typeName = dataRelationship.type;\n                        // tslint:disable-next-line:max-line-length\n                        const modelType = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n                        if (modelType) {\n                            const relationshipModel = this.getBelongsToRelationship(modelType, dataRelationship, included, typeName, remainingModels);\n                            if (relationshipModel) {\n                                this[metadata.propertyName] = relationshipModel;\n                            }\n                        }\n                        else {\n                            throw { message: `parseBelongsTo - Model type for relationship ${typeName} not found.` };\n                        }\n                    }\n                }\n            }\n        }\n    }\n    getHasManyRelationship(modelType, data, included, typeName, remainingModels) {\n        const relationshipList = [];\n        data.forEach((item) => {\n            const relationshipData = find(included, { id: item.id, type: typeName });\n            if (relationshipData) {\n                const newObject = this.createOrPeek(modelType, relationshipData);\n                const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n                const modelsForProcessing = remainingModels.concat([]);\n                if (indexOfNewlyFoundModel !== -1) {\n                    modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n                    newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n                }\n                relationshipList.push(newObject);\n            }\n        });\n        return relationshipList;\n    }\n    getBelongsToRelationship(modelType, data, included, typeName, remainingModels) {\n        const id = data.id;\n        const relationshipData = find(included, { id, type: typeName });\n        if (relationshipData) {\n            const newObject = this.createOrPeek(modelType, relationshipData);\n            const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n            const modelsForProcessing = remainingModels.concat([]);\n            if (indexOfNewlyFoundModel !== -1) {\n                modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n                newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n            }\n            return newObject;\n        }\n        return this.internalDatastore.peekRecord(modelType, id);\n    }\n    createOrPeek(modelType, data) {\n        const peek = this.internalDatastore.peekRecord(modelType, data.id);\n        if (peek) {\n            _.extend(peek, this.internalDatastore.transformSerializedNamesToPropertyNames(modelType, data.attributes));\n            return peek;\n        }\n        const newObject = this.internalDatastore.deserializeModel(modelType, data);\n        this.internalDatastore.addToStore(newObject);\n        return newObject;\n    }\n}\n\nclass ErrorResponse {\n    constructor(errors) {\n        this.errors = [];\n        if (errors) {\n            this.errors = errors;\n        }\n    }\n}\n\nclass JsonApiQueryData {\n    constructor(jsonApiModels, metaData) {\n        this.jsonApiModels = jsonApiModels;\n        this.metaData = metaData;\n    }\n    getModels() {\n        return this.jsonApiModels;\n    }\n    getMeta() {\n        return this.metaData;\n    }\n}\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex = AttributeMetadata;\nclass JsonApiDatastore {\n    constructor(http) {\n        this.http = http;\n        this.globalRequestOptions = {};\n        this.internalStore = {};\n        this.toQueryString = this.datastoreConfig.overrides\n            && this.datastoreConfig.overrides.toQueryString ?\n            this.datastoreConfig.overrides.toQueryString : this._toQueryString;\n    }\n    set headers(headers) {\n        this.globalHeaders = headers;\n    }\n    set requestOptions(requestOptions) {\n        this.globalRequestOptions = requestOptions;\n    }\n    get datastoreConfig() {\n        const configFromDecorator = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor);\n        return Object.assign(configFromDecorator, this.config);\n    }\n    get getDirtyAttributes() {\n        if (this.datastoreConfig.overrides\n            && this.datastoreConfig.overrides.getDirtyAttributes) {\n            return this.datastoreConfig.overrides.getDirtyAttributes;\n        }\n        return JsonApiDatastore.getDirtyAttributes;\n    }\n    static getDirtyAttributes(attributesMetadata) {\n        const dirtyData = {};\n        for (const propertyName in attributesMetadata) {\n            if (attributesMetadata.hasOwnProperty(propertyName)) {\n                const metadata = attributesMetadata[propertyName];\n                if (metadata.hasDirtyAttributes) {\n                    const attributeName = metadata.serializedName != null ? metadata.serializedName : propertyName;\n                    dirtyData[attributeName] = metadata.serialisationValue ? metadata.serialisationValue : metadata.newValue;\n                }\n            }\n        }\n        return dirtyData;\n    }\n    /**\n     * @deprecated use findAll method to take all models\n     */\n    query(modelType, params, headers, customUrl) {\n        const requestHeaders = this.buildHttpHeaders(headers);\n        const url = this.buildUrl(modelType, params, undefined, customUrl);\n        return this.http.get(url, { headers: requestHeaders })\n            .pipe(map((res) => this.extractQueryData(res, modelType)), catchError((res) => this.handleError(res)));\n    }\n    findAll(modelType, params, headers, customUrl) {\n        const url = this.buildUrl(modelType, params, undefined, customUrl);\n        const requestOptions = this.buildRequestOptions({ headers, observe: 'response' });\n        return this.http.get(url, requestOptions)\n            .pipe(map((res) => this.extractQueryData(res, modelType, true)), catchError((res) => this.handleError(res)));\n    }\n    findRecord(modelType, id, params, headers, customUrl) {\n        const requestOptions = this.buildRequestOptions({ headers, observe: 'response' });\n        const url = this.buildUrl(modelType, params, id, customUrl);\n        return this.http.get(url, requestOptions)\n            .pipe(map((res) => this.extractRecordData(res, modelType)), catchError((res) => this.handleError(res)));\n    }\n    createRecord(modelType, data) {\n        return new modelType(this, { attributes: data });\n    }\n    saveRecord(attributesMetadata, model, params, headers, customUrl) {\n        const modelType = model.constructor;\n        const modelConfig = model.modelConfig;\n        const typeName = modelConfig.type;\n        const relationships = this.getRelationships(model);\n        const url = this.buildUrl(modelType, params, model.id, customUrl);\n        let httpCall;\n        const body = {\n            data: {\n                relationships,\n                type: typeName,\n                id: model.id,\n                attributes: this.getDirtyAttributes(attributesMetadata, model)\n            }\n        };\n        const requestOptions = this.buildRequestOptions({ headers, observe: 'response' });\n        if (model.id) {\n            httpCall = this.http.patch(url, body, requestOptions);\n        }\n        else {\n            httpCall = this.http.post(url, body, requestOptions);\n        }\n        return httpCall\n            .pipe(map((res) => [200, 201].indexOf(res.status) !== -1 ? this.extractRecordData(res, modelType, model) : model), catchError((res) => {\n            if (res == null) {\n                return of(model);\n            }\n            return this.handleError(res);\n        }), map((res) => this.updateRelationships(res, relationships)));\n    }\n    deleteRecord(modelType, id, headers, customUrl) {\n        const requestOptions = this.buildRequestOptions({ headers });\n        const url = this.buildUrl(modelType, null, id, customUrl);\n        return this.http.delete(url, requestOptions)\n            .pipe(catchError((res) => this.handleError(res)));\n    }\n    peekRecord(modelType, id) {\n        const type = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n        return this.internalStore[type] ? this.internalStore[type][id] : null;\n    }\n    peekAll(modelType) {\n        const type = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n        const typeStore = this.internalStore[type];\n        return typeStore ? Object.keys(typeStore).map((key) => typeStore[key]) : [];\n    }\n    deserializeModel(modelType, data) {\n        data.attributes = this.transformSerializedNamesToPropertyNames(modelType, data.attributes);\n        return new modelType(this, data);\n    }\n    addToStore(modelOrModels) {\n        const models = Array.isArray(modelOrModels) ? modelOrModels : [modelOrModels];\n        const type = models[0].modelConfig.type;\n        let typeStore = this.internalStore[type];\n        if (!typeStore) {\n            typeStore = this.internalStore[type] = {};\n        }\n        for (const model of models) {\n            typeStore[model.id] = model;\n        }\n    }\n    transformSerializedNamesToPropertyNames(modelType, attributes) {\n        const serializedNameToPropertyName = this.getModelPropertyNames(modelType.prototype);\n        const properties = {};\n        Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n            if (attributes && attributes[serializedName] !== null && attributes[serializedName] !== undefined) {\n                properties[serializedNameToPropertyName[serializedName]] = attributes[serializedName];\n            }\n        });\n        return properties;\n    }\n    buildUrl(modelType, params, id, customUrl) {\n        // TODO: use HttpParams instead of appending a string to the url\n        const queryParams = this.toQueryString(params);\n        if (customUrl) {\n            return queryParams ? `${customUrl}?${queryParams}` : customUrl;\n        }\n        const modelConfig = Reflect.getMetadata('JsonApiModelConfig', modelType);\n        const baseUrl = modelConfig.baseUrl || this.datastoreConfig.baseUrl;\n        const apiVersion = modelConfig.apiVersion || this.datastoreConfig.apiVersion;\n        const modelEndpointUrl = modelConfig.modelEndpointUrl || modelConfig.type;\n        const url = [baseUrl, apiVersion, modelEndpointUrl, id].filter((x) => x).join('/');\n        return queryParams ? `${url}?${queryParams}` : url;\n    }\n    getRelationships(data) {\n        let relationships;\n        const belongsToMetadata = Reflect.getMetadata('BelongsTo', data) || [];\n        const hasManyMetadata = Reflect.getMetadata('HasMany', data) || [];\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                if (data[key] instanceof JsonApiModel) {\n                    relationships = relationships || {};\n                    if (data[key].id) {\n                        const entity = belongsToMetadata.find((it) => it.propertyName === key);\n                        const relationshipKey = entity.relationship;\n                        relationships[relationshipKey] = {\n                            data: this.buildSingleRelationshipData(data[key])\n                        };\n                    }\n                }\n                else if (data[key] instanceof Array) {\n                    const entity = hasManyMetadata.find((it) => it.propertyName === key);\n                    if (entity && this.isValidToManyRelation(data[key])) {\n                        relationships = relationships || {};\n                        const relationshipKey = entity.relationship;\n                        const relationshipData = data[key]\n                            .filter((model) => model.id)\n                            .map((model) => this.buildSingleRelationshipData(model));\n                        relationships[relationshipKey] = {\n                            data: relationshipData\n                        };\n                    }\n                }\n                else if (data[key] === null) {\n                    const entity = belongsToMetadata.find((entity) => entity.propertyName === key);\n                    if (entity) {\n                        relationships = relationships || {};\n                        relationships[entity.relationship] = {\n                            data: null\n                        };\n                    }\n                }\n            }\n        }\n        return relationships;\n    }\n    isValidToManyRelation(objects) {\n        if (!objects.length) {\n            return true;\n        }\n        const isJsonApiModel = objects.every((item) => item instanceof JsonApiModel);\n        if (!isJsonApiModel) {\n            return false;\n        }\n        const types = objects.map((item) => item.modelConfig.modelEndpointUrl || item.modelConfig.type);\n        return types\n            .filter((type, index, self) => self.indexOf(type) === index)\n            .length === 1;\n    }\n    buildSingleRelationshipData(model) {\n        const relationshipType = model.modelConfig.type;\n        const relationShipData = { type: relationshipType };\n        if (model.id) {\n            relationShipData.id = model.id;\n        }\n        else {\n            const attributesMetadata = Reflect.getMetadata('Attribute', model);\n            relationShipData.attributes = this.getDirtyAttributes(attributesMetadata, model);\n        }\n        return relationShipData;\n    }\n    extractQueryData(response, modelType, withMeta = false) {\n        const body = response.body;\n        const models = [];\n        body.data.forEach((data) => {\n            const model = this.deserializeModel(modelType, data);\n            this.addToStore(model);\n            if (body.included) {\n                model.syncRelationships(data, body.included.concat(data));\n                this.addToStore(model);\n            }\n            models.push(model);\n        });\n        if (withMeta && withMeta === true) {\n            return new JsonApiQueryData(models, this.parseMeta(body, modelType));\n        }\n        return models;\n    }\n    extractRecordData(res, modelType, model) {\n        const body = res.body;\n        // Error in Angular < 5.2.4 (see https://github.com/angular/angular/issues/20744)\n        // null is converted to 'null', so this is temporary needed to make testcase possible\n        // (and to avoid a decrease of the coverage)\n        if (!body || body === 'null') {\n            throw new Error('no body in response');\n        }\n        if (!body.data) {\n            if (res.status === 201 || !model) {\n                throw new Error('expected data in response');\n            }\n            return model;\n        }\n        if (model) {\n            model.modelInitialization = true;\n            model.id = body.data.id;\n            Object.assign(model, body.data.attributes);\n            model.modelInitialization = false;\n        }\n        const deserializedModel = model || this.deserializeModel(modelType, body.data);\n        this.addToStore(deserializedModel);\n        if (body.included) {\n            deserializedModel.syncRelationships(body.data, body.included);\n            this.addToStore(deserializedModel);\n        }\n        return deserializedModel;\n    }\n    handleError(error) {\n        if (error instanceof HttpErrorResponse &&\n            error.error instanceof Object &&\n            error.error.errors &&\n            error.error.errors instanceof Array) {\n            const errors = new ErrorResponse(error.error.errors);\n            return throwError(errors);\n        }\n        return throwError(error);\n    }\n    parseMeta(body, modelType) {\n        const metaModel = Reflect.getMetadata('JsonApiModelConfig', modelType).meta;\n        return new metaModel(body);\n    }\n    /**\n     * @deprecated use buildHttpHeaders method to build request headers\n     */\n    getOptions(customHeaders) {\n        return {\n            headers: this.buildHttpHeaders(customHeaders),\n        };\n    }\n    buildHttpHeaders(customHeaders) {\n        let requestHeaders = new HttpHeaders({\n            Accept: 'application/vnd.api+json',\n            'Content-Type': 'application/vnd.api+json'\n        });\n        if (this.globalHeaders) {\n            this.globalHeaders.keys().forEach((key) => {\n                if (this.globalHeaders.has(key)) {\n                    requestHeaders = requestHeaders.set(key, this.globalHeaders.get(key));\n                }\n            });\n        }\n        if (customHeaders) {\n            customHeaders.keys().forEach((key) => {\n                if (customHeaders.has(key)) {\n                    requestHeaders = requestHeaders.set(key, customHeaders.get(key));\n                }\n            });\n        }\n        return requestHeaders;\n    }\n    resetMetadataAttributes(res, attributesMetadata, modelType) {\n        for (const propertyName in attributesMetadata) {\n            if (attributesMetadata.hasOwnProperty(propertyName)) {\n                const metadata = attributesMetadata[propertyName];\n                if (metadata.hasDirtyAttributes) {\n                    metadata.hasDirtyAttributes = false;\n                }\n            }\n        }\n        // @ts-ignore\n        res[AttributeMetadataIndex] = attributesMetadata;\n        return res;\n    }\n    updateRelationships(model, relationships) {\n        const modelsTypes = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor).models;\n        for (const relationship in relationships) {\n            if (relationships.hasOwnProperty(relationship) && model.hasOwnProperty(relationship) && model[relationship]) {\n                const relationshipModel = model[relationship];\n                const hasMany = Reflect.getMetadata('HasMany', relationshipModel);\n                const propertyHasMany = find(hasMany, (property) => {\n                    return modelsTypes[property.relationship] === model.constructor;\n                });\n                if (propertyHasMany) {\n                    relationshipModel[propertyHasMany.propertyName] = relationshipModel[propertyHasMany.propertyName] || [];\n                    const indexOfModel = relationshipModel[propertyHasMany.propertyName].indexOf(model);\n                    if (indexOfModel === -1) {\n                        relationshipModel[propertyHasMany.propertyName].push(model);\n                    }\n                    else {\n                        relationshipModel[propertyHasMany.propertyName][indexOfModel] = model;\n                    }\n                }\n            }\n        }\n        return model;\n    }\n    getModelPropertyNames(model) {\n        return Reflect.getMetadata('AttributeMapping', model) || [];\n    }\n    buildRequestOptions(customOptions = {}) {\n        const httpHeaders = this.buildHttpHeaders(customOptions.headers);\n        const requestOptions = Object.assign(customOptions, {\n            headers: httpHeaders\n        });\n        return Object.assign(this.globalRequestOptions, requestOptions);\n    }\n    _toQueryString(params) {\n        return qs.stringify(params, { arrayFormat: 'brackets' });\n    }\n}\n/** @nocollapse */ JsonApiDatastore.ɵfac = function JsonApiDatastore_Factory(t) { return new (t || JsonApiDatastore)(i0.ɵɵinject(i1.HttpClient)); };\n/** @nocollapse */ JsonApiDatastore.ɵprov = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjectable({ token: JsonApiDatastore, factory: JsonApiDatastore.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JsonApiDatastore, [{\n        type: Injectable\n    }], function () { return [{ type: i1.HttpClient }]; }, null); })();\n\nconst PROVIDERS = [\n    JsonApiDatastore\n];\n\nclass JsonApiModule {\n}\n/** @nocollapse */ JsonApiModule.ɵfac = function JsonApiModule_Factory(t) { return new (t || JsonApiModule)(); };\n/** @nocollapse */ JsonApiModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: JsonApiModule });\n/** @nocollapse */ JsonApiModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({ providers: [PROVIDERS], imports: [HttpClientModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JsonApiModule, [{\n        type: NgModule,\n        args: [{\n                providers: [PROVIDERS],\n                exports: [HttpClientModule]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(JsonApiModule, { exports: [HttpClientModule] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Attribute, BelongsTo, DEFAULT_OPTIONS, ErrorResponse, HasMany, JsonApiDatastore, JsonApiDatastoreConfig, JsonApiMetaModel, JsonApiModel, JsonApiModelConfig, JsonApiModule, JsonApiNestedModel, JsonApiQueryData, JsonAttribute, JsonModelConverter, NestedAttribute, PROVIDERS };\n//# sourceMappingURL=angular2-jsonapi.mjs.map\n","map":{"version":3,"file":"angular2-jsonapi.mjs","sources":["../../../projects/angular2-jsonapi/src/models/json-nested.model.ts","../../../projects/angular2-jsonapi/src/converters/json-model/json-model.converter.ts","../../../projects/angular2-jsonapi/src/decorators/has-many.decorator.ts","../../../projects/angular2-jsonapi/src/decorators/belongs-to.decorator.ts","../../../projects/angular2-jsonapi/src/constants/symbols.ts","../../../projects/angular2-jsonapi/src/converters/date/date.converter.ts","../../../projects/angular2-jsonapi/src/decorators/attribute.decorator.ts","../../../projects/angular2-jsonapi/src/decorators/nested-attribute.decorator.ts","../../../projects/angular2-jsonapi/src/decorators/json-attribute.decorator.ts","../../../projects/angular2-jsonapi/src/models/json-api-meta.model.ts","../../../projects/angular2-jsonapi/src/decorators/json-api-model-config.decorator.ts","../../../projects/angular2-jsonapi/src/decorators/json-api-datastore-config.decorator.ts","../../../projects/angular2-jsonapi/src/models/json-api.model.ts","../../../projects/angular2-jsonapi/src/models/error-response.model.ts","../../../projects/angular2-jsonapi/src/models/json-api-query-data.ts","../../../projects/angular2-jsonapi/src/services/json-api-datastore.service.ts","../../../projects/angular2-jsonapi/src/providers.ts","../../../projects/angular2-jsonapi/src/module.ts","../../../projects/angular2-jsonapi/src/angular2-jsonapi.ts"],"sourcesContent":["import { ModelConfig } from '../interfaces/model-config.interface';\nimport { JsonApiModel } from './json-api.model';\n\nexport class JsonApiNestedModel {\n  [key: string]: any;\n\n  public nestedDataSerialization = false;\n\n  constructor(data?: any) {\n    if (data) {\n      Object.assign(this, data);\n    }\n  }\n\n  get modelConfig(): ModelConfig {\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n  }\n\n  public fill(data: any) {\n    Object.assign(this, data);\n  }\n\n  public serialize(): any {\n    return this.transformSerializedNamesToPropertyNames();\n  }\n\n  protected transformSerializedNamesToPropertyNames<T extends JsonApiModel>() {\n    const serializedNameToPropertyName = this.getModelPropertyNames();\n    const properties: any = {};\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n      if (this && this[serializedName] !== null &&\n        this[serializedName] !== undefined && serializedName !== 'nestedDataSerialization') {\n        properties[serializedNameToPropertyName[serializedName]] = this[serializedName];\n      }\n    });\n\n    return properties;\n  }\n\n  protected getModelPropertyNames() {\n    return Reflect.getMetadata('AttributeMapping', this) || [];\n  }\n}\n","import { JsonModelConverterConfig } from '../../interfaces/json-model-converter-config.interface';\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\nimport { JsonApiNestedModel } from '../../models/json-nested.model';\n\nexport const DEFAULT_OPTIONS: JsonModelConverterConfig = {\n  nullValue: false,\n  hasMany: false\n};\n\nexport class JsonModelConverter<T> implements PropertyConverter {\n  private modelType: any; // ModelType<T>\n  private options: JsonModelConverterConfig;\n\n  constructor(model: T, options: JsonModelConverterConfig = {}) {\n    this.modelType = model; // <ModelType<T>>model\n    this.options = {...DEFAULT_OPTIONS, ...options};\n  }\n\n  mask(value: any): T | Array<T> {\n    if (!value && !this.options.nullValue) {\n      if (this.options.hasMany) {\n        return [];\n      }\n      return new this.modelType();\n    }\n\n    let result = null;\n    if (this.options.hasMany) {\n      if (!Array.isArray(value)) {\n        throw new Error(`ERROR: JsonModelConverter: Expected array but got ${typeof value}.`);\n      }\n      result = [];\n      for (const item of value) {\n        if (item === null) {\n          continue;\n        }\n        let temp;\n        if (typeof item === 'object') {\n          temp = new this.modelType();\n          temp.fill(item);\n        } else {\n          temp = item;\n        }\n\n        result.push(temp);\n      }\n    } else {\n      if (!(value instanceof this.modelType)) {\n        result = new this.modelType();\n        result.fill(value);\n      } else {\n        result = value;\n      }\n    }\n    return result;\n  }\n\n  unmask(value: any): any {\n    if (!value) {\n      return value;\n    }\n    let result = null;\n    if (Array.isArray(value)) {\n      result = [];\n      for (const item of value) {\n        if (!item) {\n          continue;\n        }\n        if (item instanceof JsonApiNestedModel) {\n          item.nestedDataSerialization = true;\n          result.push(item.serialize());\n          item.nestedDataSerialization = false;\n        } else {\n          result.push(item);\n        }\n      }\n    } else {\n      if (value instanceof JsonApiNestedModel) {\n        value.nestedDataSerialization = true;\n        result = value.serialize();\n        value.nestedDataSerialization = false;\n      } else {\n        result = value;\n      }\n    }\n    return result;\n  }\n}\n","export function HasMany(config: any = {}) {\n  return (target: any, propertyName: string | symbol) => {\n    const annotations = Reflect.getMetadata('HasMany', target) || [];\n\n    annotations.push({\n      propertyName,\n      relationship: config.key || propertyName\n    });\n\n    Reflect.defineMetadata('HasMany', annotations, target);\n  };\n}\n","export function BelongsTo(config: any = {}) {\n  return (target: any, propertyName: string | symbol) => {\n    const annotations = Reflect.getMetadata('BelongsTo', target) || [];\n\n    annotations.push({\n      propertyName,\n      relationship: config.key || propertyName\n    });\n\n    Reflect.defineMetadata('BelongsTo', annotations, target);\n  };\n}\n","// tslint:disable-next-line:variable-name\nexport const AttributeMetadata = Symbol('AttributeMetadata') as any;\n","import { parseISO } from 'date-fns';\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\n\nexport class DateConverter implements PropertyConverter {\n  mask(value: any) {\n    if (typeof value === 'string') {\n      return parseISO(value);\n    } else {\n      return value;\n    }\n  }\n\n  unmask(value: any) {\n    if (value === null) {\n      return null;\n    }\n    return value.toISOString();\n  }\n}\n","import { AttributeMetadata } from '../constants/symbols';\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport { DateConverter } from '../converters/date/date.converter';\nimport * as _ from 'lodash';\n\nexport function Attribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else if (dataType === Date) {\n        attrConverter = new DateConverter();\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('Attribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('Attribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const setMetadata = (\n      instance: any,\n      oldValue: any,\n      newValue: any\n    ) => {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n\n      if (!instance[AttributeMetadata]) {\n        instance[AttributeMetadata] = {};\n      }\n      instance[AttributeMetadata][propertyName] = {\n        newValue,\n        oldValue,\n        nested: false,\n        serializedName: options.serializedName,\n        hasDirtyAttributes: !_.isEqual(oldValue, newValue),\n        serialisationValue: converter(targetType, newValue, true)\n      };\n    };\n\n    const getter = function() {\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      const convertedValue = converter(targetType, newVal);\n      let oldValue = null;\n      if (this.isModelInitialization() && this.id) {\n        oldValue = converter(targetType, newVal);\n      } else {\n        if (this[AttributeMetadata] && this[AttributeMetadata][propertyName]) {\n          oldValue = this[AttributeMetadata][propertyName].oldValue;\n        }\n      }\n\n      this[`_${propertyName}`] = convertedValue;\n      setMetadata(this, oldValue, convertedValue);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n","import { AttributeMetadata } from '../constants/symbols';\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport * as _ from 'lodash';\n\nexport function NestedAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('NestedAttribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('NestedAttribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const updateMetadata = (instance: any) => {\n      const newValue = instance[`_${propertyName}`];\n\n      if (!instance[AttributeMetadata]) {\n        instance[AttributeMetadata] = {};\n      }\n      if (instance[AttributeMetadata][propertyName] && !instance.isModelInitialization()) {\n        instance[AttributeMetadata][propertyName].newValue = newValue;\n        instance[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\n          instance[AttributeMetadata][propertyName].oldValue,\n          newValue\n        );\n        instance[AttributeMetadata][propertyName].serialisationValue = newValue;\n      } else {\n        const oldValue = _.cloneDeep(newValue);\n        instance[AttributeMetadata][propertyName] = {\n          newValue,\n          oldValue,\n          converter,\n          nested: true,\n          hasDirtyAttributes: !_.isEqual(newValue, oldValue)\n        };\n      }\n    };\n\n    const getter = function() {\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      this[`_${propertyName}`] = converter(targetType, newVal);\n      updateMetadata(this);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n\n    }\n  };\n}\n","import { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport { DateConverter } from '../converters/date/date.converter';\n\nexport function JsonAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else if (dataType === Date) {\n        attrConverter = new DateConverter();\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('JsonAttribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('JsonAttribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const getter = function() {\n      if (this.nestedDataSerialization) {\n        return converter(Reflect.getMetadata('design:type', target, propertyName), this[`_${propertyName}`], true);\n      }\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      this[`_${propertyName}`] = converter(targetType, newVal);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n","export type MetaModelType<T> = new(response: any) => T;\n\nexport class JsonApiMetaModel {\n  public links: Array<any>;\n  public meta: any;\n\n  constructor(response: any) {\n    this.links = response.links || [];\n    this.meta = response.meta;\n  }\n}\n","import { JsonApiMetaModel } from '../models/json-api-meta.model';\nimport { ModelConfig } from '../interfaces/model-config.interface';\n\nexport function JsonApiModelConfig(config: ModelConfig) {\n  return (target: any) => {\n    if (typeof config.meta === 'undefined' || config.meta == null) {\n      config.meta = JsonApiMetaModel;\n    }\n\n    Reflect.defineMetadata('JsonApiModelConfig', config, target);\n  };\n}\n","export function JsonApiDatastoreConfig(config: any = {}) {\n  return (target: any) => {\n    Reflect.defineMetadata('JsonApiDatastoreConfig', config, target);\n  };\n}\n","import { find, includes } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { JsonApiDatastore, ModelType } from '../services/json-api-datastore.service';\nimport { ModelConfig } from '../interfaces/model-config.interface';\nimport * as _ from 'lodash';\nimport { AttributeMetadata } from '../constants/symbols';\nimport { HttpHeaders } from '@angular/common/http';\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\n\nexport class JsonApiModel {\n  id: string;\n  public modelInitialization = false;\n\n  [key: string]: any;\n\n  lastSyncModels: Array<any>;\n\n  constructor(private internalDatastore: JsonApiDatastore, data?: any) {\n    if (data) {\n      this.modelInitialization = true;\n      this.id = data.id;\n      Object.assign(this, data.attributes);\n      this.modelInitialization = false;\n    }\n  }\n\n  public isModelInitialization(): boolean {\n    return this.modelInitialization;\n  }\n\n  public syncRelationships(data: any, included: any, remainingModels?: Array<any>): void {\n    if (this.lastSyncModels === included) {\n      return;\n    }\n\n    if (data) {\n      let modelsForProcessing = remainingModels;\n\n      if (modelsForProcessing === undefined) {\n        modelsForProcessing = [].concat(included);\n      }\n\n      this.parseHasMany(data, included, modelsForProcessing);\n      this.parseBelongsTo(data, included, modelsForProcessing);\n    }\n\n    this.lastSyncModels = included;\n  }\n\n  public save(params?: any, headers?: HttpHeaders, customUrl?: string): Observable<this> {\n    this.checkChanges();\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    return this.internalDatastore.saveRecord(attributesMetadata, this, params, headers, customUrl);\n  }\n\n  get hasDirtyAttributes() {\n    this.checkChanges();\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    let hasDirtyAttributes = false;\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n        if (metadata.hasDirtyAttributes) {\n          hasDirtyAttributes = true;\n          break;\n        }\n      }\n    }\n    return hasDirtyAttributes;\n  }\n\n  private checkChanges() {\n    const attributesMetadata: any = this[AttributeMetadata];\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n        if (metadata.nested) {\n          this[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\n            attributesMetadata[propertyName].oldValue,\n            attributesMetadata[propertyName].newValue\n          );\n          this[AttributeMetadata][propertyName].serialisationValue = attributesMetadata[propertyName].converter(\n            Reflect.getMetadata('design:type', this, propertyName),\n            _.cloneDeep(attributesMetadata[propertyName].newValue),\n            true\n          );\n        }\n      }\n    }\n  }\n\n  public rollbackAttributes(): void {\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        if (attributesMetadata[propertyName].hasDirtyAttributes) {\n          this[propertyName] = _.cloneDeep(attributesMetadata[propertyName].oldValue);\n        }\n      }\n    }\n  }\n\n  get modelConfig(): ModelConfig {\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n  }\n\n  private parseHasMany(data: any, included: any, remainingModels: Array<any>): void {\n    const hasMany: any = Reflect.getMetadata('HasMany', this);\n\n    if (hasMany) {\n      for (const metadata of hasMany) {\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\n\n        if (relationship && relationship.data && Array.isArray(relationship.data)) {\n          let allModels: JsonApiModel[] = [];\n          const modelTypesFetched: any = [];\n\n          for (const typeIndex of Object.keys(relationship.data)) {\n            const typeName: string = relationship.data[typeIndex].type;\n\n            if (!includes(modelTypesFetched, typeName)) {\n              modelTypesFetched.push(typeName);\n              // tslint:disable-next-line:max-line-length\n              const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n\n              if (modelType) {\n                const relationshipModels: JsonApiModel[] = this.getHasManyRelationship(\n                  modelType,\n                  relationship.data,\n                  included,\n                  typeName,\n                  remainingModels\n                );\n\n                if (relationshipModels.length > 0) {\n                  allModels = allModels.concat(relationshipModels);\n                }\n              } else {\n                throw { message: `parseHasMany - Model type for relationship ${typeName} not found.` };\n              }\n            }\n          }\n\n          this[metadata.propertyName] = allModels;\n        }\n      }\n    }\n  }\n\n  private parseBelongsTo(data: any, included: Array<any>, remainingModels: Array<any>): void {\n    const belongsTo: any = Reflect.getMetadata('BelongsTo', this);\n\n    if (belongsTo) {\n      for (const metadata of belongsTo) {\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\n        if (relationship && relationship.data) {\n          const dataRelationship: any = (relationship.data instanceof Array) ? relationship.data[0] : relationship.data;\n          if (dataRelationship) {\n            const typeName: string = dataRelationship.type;\n            // tslint:disable-next-line:max-line-length\n            const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n\n            if (modelType) {\n              const relationshipModel = this.getBelongsToRelationship(\n                modelType,\n                dataRelationship,\n                included,\n                typeName,\n                remainingModels\n              );\n\n              if (relationshipModel) {\n                this[metadata.propertyName] = relationshipModel;\n              }\n            } else {\n              throw { message: `parseBelongsTo - Model type for relationship ${typeName} not found.` };\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private getHasManyRelationship<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    data: any,\n    included: any,\n    typeName: string,\n    remainingModels: Array<any>\n  ): Array<T> {\n    const relationshipList: Array<T> = [];\n\n    data.forEach((item: any) => {\n      const relationshipData: any = find(included, { id: item.id, type: typeName } as any);\n\n      if (relationshipData) {\n        const newObject: T = this.createOrPeek(modelType, relationshipData);\n\n        const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n        const modelsForProcessing = remainingModels.concat([]);\n\n        if (indexOfNewlyFoundModel !== -1) {\n          modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n          newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n        }\n\n        relationshipList.push(newObject);\n      }\n    });\n\n    return relationshipList;\n  }\n\n  private getBelongsToRelationship<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    data: any,\n    included: Array<any>,\n    typeName: string,\n    remainingModels: Array<any>\n  ): T | null {\n    const id: string = data.id;\n\n    const relationshipData: any = find(included, { id, type: typeName } as any);\n\n    if (relationshipData) {\n      const newObject: T = this.createOrPeek(modelType, relationshipData);\n\n      const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n      const modelsForProcessing = remainingModels.concat([]);\n\n      if (indexOfNewlyFoundModel !== -1) {\n        modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n        newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n      }\n\n      return newObject;\n    }\n\n    return this.internalDatastore.peekRecord(modelType, id);\n  }\n\n  private createOrPeek<T extends JsonApiModel>(modelType: ModelType<T>, data: any): T {\n    const peek = this.internalDatastore.peekRecord(modelType, data.id);\n\n    if (peek) {\n      _.extend(peek, this.internalDatastore.transformSerializedNamesToPropertyNames(modelType, data.attributes));\n      return peek;\n    }\n\n    const newObject: T = this.internalDatastore.deserializeModel(modelType, data);\n    this.internalDatastore.addToStore(newObject);\n\n    return newObject;\n  }\n}\n","export interface JsonApiError {\n  id?: string;\n  links?: Array<any>;\n  status?: string;\n  code?: string;\n  title?: string;\n  detail?: string;\n  source?: {\n    pointer?: string;\n    parameter?: string\n  };\n  meta?: any;\n}\n\nexport class ErrorResponse {\n  errors?: JsonApiError[] = [];\n\n  constructor(errors ?: JsonApiError[]) {\n    if (errors) {\n      this.errors = errors;\n    }\n  }\n}\n","export class JsonApiQueryData<T> {\n  constructor(protected jsonApiModels: Array<T>, protected metaData?: any) {\n  }\n\n  public getModels(): T[] {\n    return this.jsonApiModels;\n  }\n\n  public getMeta(): any {\n    return this.metaData;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { find } from 'lodash';\nimport { catchError, map } from 'rxjs/operators';\nimport { Observable, of, throwError } from 'rxjs';\nimport { JsonApiModel } from '../models/json-api.model';\nimport { ErrorResponse } from '../models/error-response.model';\nimport { JsonApiQueryData } from '../models/json-api-query-data';\nimport * as qs from 'qs';\nimport { DatastoreConfig } from '../interfaces/datastore-config.interface';\nimport { ModelConfig } from '../interfaces/model-config.interface';\nimport { AttributeMetadata } from '../constants/symbols';\nimport 'reflect-metadata';\n\nexport type ModelType<T extends JsonApiModel> = new (datastore: JsonApiDatastore, data: any) => T;\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\n\n@Injectable()\nexport class JsonApiDatastore {\n\n  protected config: DatastoreConfig;\n  private globalHeaders: HttpHeaders;\n  private globalRequestOptions: object = {};\n  private internalStore: { [type: string]: { [id: string]: JsonApiModel } } = {};\n  private toQueryString: (params: any) => string = this.datastoreConfig.overrides\n    && this.datastoreConfig.overrides.toQueryString ?\n    this.datastoreConfig.overrides.toQueryString : this._toQueryString;\n\n  constructor(protected http: HttpClient) {\n  }\n\n  set headers(headers: HttpHeaders) {\n    this.globalHeaders = headers;\n  }\n\n  set requestOptions(requestOptions: object) {\n    this.globalRequestOptions = requestOptions;\n  }\n\n  public get datastoreConfig(): DatastoreConfig {\n    const configFromDecorator: DatastoreConfig = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor);\n    return Object.assign(configFromDecorator, this.config);\n  }\n\n  private get getDirtyAttributes() {\n    if (this.datastoreConfig.overrides\n      && this.datastoreConfig.overrides.getDirtyAttributes) {\n      return this.datastoreConfig.overrides.getDirtyAttributes;\n    }\n    return JsonApiDatastore.getDirtyAttributes;\n  }\n\n  private static getDirtyAttributes(attributesMetadata: any): { string: any } {\n    const dirtyData: any = {};\n\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n\n        if (metadata.hasDirtyAttributes) {\n          const attributeName = metadata.serializedName != null ? metadata.serializedName : propertyName;\n          dirtyData[attributeName] = metadata.serialisationValue ? metadata.serialisationValue : metadata.newValue;\n        }\n      }\n    }\n    return dirtyData;\n  }\n\n  /**\n   * @deprecated use findAll method to take all models\n   */\n  query<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T[]> {\n    const requestHeaders: HttpHeaders = this.buildHttpHeaders(headers);\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\n    return this.http.get(url, { headers: requestHeaders })\n      .pipe(\n        map((res: any) => this.extractQueryData(res, modelType)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public findAll<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<JsonApiQueryData<T>> {\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\n    const requestOptions: object = this.buildRequestOptions({ headers, observe: 'response' });\n\n    return this.http.get(url, requestOptions)\n      .pipe(\n        map((res: HttpResponse<object>) => this.extractQueryData(res, modelType, true)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public findRecord<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    id: string,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T> {\n    const requestOptions: object = this.buildRequestOptions({ headers, observe: 'response' });\n    const url: string = this.buildUrl(modelType, params, id, customUrl);\n\n    return this.http.get(url, requestOptions)\n      .pipe(\n        map((res: HttpResponse<object>) => this.extractRecordData(res, modelType)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public createRecord<T extends JsonApiModel>(modelType: ModelType<T>, data?: any): T {\n    return new modelType(this, { attributes: data });\n  }\n\n  public saveRecord<T extends JsonApiModel>(\n    attributesMetadata: any,\n    model: T,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T> {\n    const modelType = model.constructor as ModelType<T>;\n    const modelConfig: ModelConfig = model.modelConfig;\n    const typeName: string = modelConfig.type;\n    const relationships: any = this.getRelationships(model);\n    const url: string = this.buildUrl(modelType, params, model.id, customUrl);\n\n    let httpCall: Observable<HttpResponse<object>>;\n    const body: any = {\n      data: {\n        relationships,\n        type: typeName,\n        id: model.id,\n        attributes: this.getDirtyAttributes(attributesMetadata, model)\n      }\n    };\n\n    const requestOptions: object = this.buildRequestOptions({ headers, observe: 'response' });\n\n    if (model.id) {\n      httpCall = this.http.patch<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\n    } else {\n      httpCall = this.http.post<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\n    }\n\n    return httpCall\n      .pipe(\n        map((res) => [200, 201].indexOf(res.status) !== -1 ? this.extractRecordData(res, modelType, model) : model),\n        catchError((res) => {\n          if (res == null) {\n            return of(model);\n          }\n          return this.handleError(res);\n        }),\n        map((res) => this.updateRelationships(res, relationships))\n      );\n  }\n\n  public deleteRecord<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    id: string,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<Response> {\n    const requestOptions: object = this.buildRequestOptions({ headers });\n    const url: string = this.buildUrl(modelType, null, id, customUrl);\n\n    return this.http.delete(url, requestOptions)\n      .pipe(\n        catchError((res: HttpErrorResponse) => this.handleError(res))\n      );\n  }\n\n  public peekRecord<T extends JsonApiModel>(modelType: ModelType<T>, id: string): T | null {\n    const type: string = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n    return this.internalStore[type] ? this.internalStore[type][id] as T : null;\n  }\n\n  public peekAll<T extends JsonApiModel>(modelType: ModelType<T>): Array<T> {\n    const type = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n    const typeStore = this.internalStore[type];\n    return typeStore ? Object.keys(typeStore).map((key) => typeStore[key] as T) : [];\n  }\n\n  public deserializeModel<T extends JsonApiModel>(modelType: ModelType<T>, data: any) {\n    data.attributes = this.transformSerializedNamesToPropertyNames(modelType, data.attributes);\n    return new modelType(this, data);\n  }\n\n  public addToStore(modelOrModels: JsonApiModel | JsonApiModel[]): void {\n    const models = Array.isArray(modelOrModels) ? modelOrModels : [modelOrModels];\n    const type: string = models[0].modelConfig.type;\n    let typeStore = this.internalStore[type];\n\n    if (!typeStore) {\n      typeStore = this.internalStore[type] = {};\n    }\n\n    for (const model of models) {\n      typeStore[model.id] = model;\n    }\n  }\n\n  public transformSerializedNamesToPropertyNames<T extends JsonApiModel>(modelType: ModelType<T>, attributes: any) {\n    const serializedNameToPropertyName = this.getModelPropertyNames(modelType.prototype);\n    const properties: any = {};\n\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n      if (attributes && attributes[serializedName] !== null && attributes[serializedName] !== undefined) {\n        properties[serializedNameToPropertyName[serializedName]] = attributes[serializedName];\n      }\n    });\n\n    return properties;\n  }\n\n  protected buildUrl<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    id?: string,\n    customUrl?: string\n  ): string {\n    // TODO: use HttpParams instead of appending a string to the url\n    const queryParams: string = this.toQueryString(params);\n\n    if (customUrl) {\n      return queryParams ? `${customUrl}?${queryParams}` : customUrl;\n    }\n\n    const modelConfig: ModelConfig = Reflect.getMetadata('JsonApiModelConfig', modelType);\n\n    const baseUrl = modelConfig.baseUrl || this.datastoreConfig.baseUrl;\n    const apiVersion = modelConfig.apiVersion || this.datastoreConfig.apiVersion;\n    const modelEndpointUrl: string = modelConfig.modelEndpointUrl || modelConfig.type;\n\n    const url: string = [baseUrl, apiVersion, modelEndpointUrl, id].filter((x) => x).join('/');\n\n    return queryParams ? `${url}?${queryParams}` : url;\n  }\n\n  protected getRelationships(data: any): any {\n    let relationships: any;\n\n    const belongsToMetadata: any[] = Reflect.getMetadata('BelongsTo', data) || [];\n    const hasManyMetadata: any[] = Reflect.getMetadata('HasMany', data) || [];\n\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        if (data[key] instanceof JsonApiModel) {\n          relationships = relationships || {};\n\n          if (data[key].id) {\n            const entity = belongsToMetadata.find((it: any) => it.propertyName === key);\n            const relationshipKey = entity.relationship;\n            relationships[relationshipKey] = {\n              data: this.buildSingleRelationshipData(data[key])\n            };\n          }\n        } else if (data[key] instanceof Array) {\n          const entity = hasManyMetadata.find((it: any) => it.propertyName === key);\n          if (entity && this.isValidToManyRelation(data[key])) {\n            relationships = relationships || {};\n\n            const relationshipKey = entity.relationship;\n            const relationshipData = data[key]\n              .filter((model: JsonApiModel) => model.id)\n              .map((model: JsonApiModel) => this.buildSingleRelationshipData(model));\n\n            relationships[relationshipKey] = {\n              data: relationshipData\n            };\n          }\n        } else if (data[key] === null) {\n          const entity = belongsToMetadata.find((entity: any) => entity.propertyName === key);\n\n          if (entity) {\n            relationships = relationships || {};\n\n            relationships[entity.relationship] = {\n              data: null\n            };\n          }\n        }\n      }\n    }\n\n    return relationships;\n  }\n\n  protected isValidToManyRelation(objects: Array<any>): boolean {\n    if (!objects.length) {\n      return true;\n    }\n    const isJsonApiModel = objects.every((item) => item instanceof JsonApiModel);\n    if (!isJsonApiModel) {\n      return false;\n    }\n    const types = objects.map((item: JsonApiModel) => item.modelConfig.modelEndpointUrl || item.modelConfig.type);\n    return types\n      .filter((type: string, index: number, self: string[]) => self.indexOf(type) === index)\n      .length === 1;\n  }\n\n  protected buildSingleRelationshipData(model: JsonApiModel): any {\n    const relationshipType: string = model.modelConfig.type;\n    const relationShipData: { type: string, id?: string, attributes?: any } = { type: relationshipType };\n\n    if (model.id) {\n      relationShipData.id = model.id;\n    } else {\n      const attributesMetadata: any = Reflect.getMetadata('Attribute', model);\n      relationShipData.attributes = this.getDirtyAttributes(attributesMetadata, model);\n    }\n\n    return relationShipData;\n  }\n\n  protected extractQueryData<T extends JsonApiModel>(\n    response: HttpResponse<object>,\n    modelType: ModelType<T>,\n    withMeta = false\n  ): Array<T> | JsonApiQueryData<T> {\n    const body: any = response.body;\n    const models: T[] = [];\n\n    body.data.forEach((data: any) => {\n      const model: T = this.deserializeModel(modelType, data);\n      this.addToStore(model);\n\n      if (body.included) {\n        model.syncRelationships(data, body.included.concat(data));\n        this.addToStore(model);\n      }\n\n      models.push(model);\n    });\n\n    if (withMeta && withMeta === true) {\n      return new JsonApiQueryData(models, this.parseMeta(body, modelType));\n    }\n\n    return models;\n  }\n\n  protected extractRecordData<T extends JsonApiModel>(\n    res: HttpResponse<object>,\n    modelType: ModelType<T>,\n    model?: T\n  ): T {\n    const body: any = res.body;\n    // Error in Angular < 5.2.4 (see https://github.com/angular/angular/issues/20744)\n    // null is converted to 'null', so this is temporary needed to make testcase possible\n    // (and to avoid a decrease of the coverage)\n    if (!body || body === 'null') {\n      throw new Error('no body in response');\n    }\n\n    if (!body.data) {\n      if (res.status === 201 || !model) {\n        throw new Error('expected data in response');\n      }\n      return model;\n    }\n\n    if (model) {\n      model.modelInitialization = true;\n      model.id = body.data.id;\n      Object.assign(model, body.data.attributes);\n      model.modelInitialization = false;\n    }\n\n    const deserializedModel = model || this.deserializeModel(modelType, body.data);\n    this.addToStore(deserializedModel);\n    if (body.included) {\n      deserializedModel.syncRelationships(body.data, body.included);\n      this.addToStore(deserializedModel);\n    }\n\n    return deserializedModel;\n  }\n\n  protected handleError(error: any): Observable<any> {\n    if (\n      error instanceof HttpErrorResponse &&\n      error.error instanceof Object &&\n      error.error.errors &&\n      error.error.errors instanceof Array\n    ) {\n      const errors: ErrorResponse = new ErrorResponse(error.error.errors);\n      return throwError(errors);\n    }\n\n    return throwError(error);\n  }\n\n  protected parseMeta(body: any, modelType: ModelType<JsonApiModel>): any {\n    const metaModel: any = Reflect.getMetadata('JsonApiModelConfig', modelType).meta;\n    return new metaModel(body);\n  }\n\n  /**\n   * @deprecated use buildHttpHeaders method to build request headers\n   */\n  protected getOptions(customHeaders?: HttpHeaders): any {\n    return {\n      headers: this.buildHttpHeaders(customHeaders),\n    };\n  }\n\n  protected buildHttpHeaders(customHeaders?: HttpHeaders): HttpHeaders {\n    let requestHeaders: HttpHeaders = new HttpHeaders({\n      Accept: 'application/vnd.api+json',\n      'Content-Type': 'application/vnd.api+json'\n    });\n\n    if (this.globalHeaders) {\n      this.globalHeaders.keys().forEach((key) => {\n        if (this.globalHeaders.has(key)) {\n          requestHeaders = requestHeaders.set(key, this.globalHeaders.get(key));\n        }\n      });\n    }\n\n    if (customHeaders) {\n      customHeaders.keys().forEach((key) => {\n        if (customHeaders.has(key)) {\n          requestHeaders = requestHeaders.set(key, customHeaders.get(key));\n        }\n      });\n    }\n\n    return requestHeaders;\n  }\n\n  protected resetMetadataAttributes<T extends JsonApiModel>(res: T, attributesMetadata: any, modelType: ModelType<T>) {\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n\n        if (metadata.hasDirtyAttributes) {\n          metadata.hasDirtyAttributes = false;\n        }\n      }\n    }\n\n    // @ts-ignore\n    res[AttributeMetadataIndex] = attributesMetadata;\n    return res;\n  }\n\n  protected updateRelationships<T extends JsonApiModel>(model: T, relationships: any): T {\n    const modelsTypes: any = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor).models;\n\n    for (const relationship in relationships) {\n      if (relationships.hasOwnProperty(relationship) && model.hasOwnProperty(relationship) && model[relationship]) {\n        const relationshipModel: JsonApiModel = model[relationship];\n        const hasMany: any[] = Reflect.getMetadata('HasMany', relationshipModel);\n        const propertyHasMany: any = find(hasMany, (property) => {\n          return modelsTypes[property.relationship] === model.constructor;\n        });\n\n        if (propertyHasMany) {\n          relationshipModel[propertyHasMany.propertyName] = relationshipModel[propertyHasMany.propertyName] || [];\n\n          const indexOfModel = relationshipModel[propertyHasMany.propertyName].indexOf(model);\n\n          if (indexOfModel === -1) {\n            relationshipModel[propertyHasMany.propertyName].push(model);\n          } else {\n            relationshipModel[propertyHasMany.propertyName][indexOfModel] = model;\n          }\n        }\n      }\n    }\n\n    return model;\n  }\n\n  protected getModelPropertyNames(model: JsonApiModel) {\n    return Reflect.getMetadata('AttributeMapping', model) || [];\n  }\n\n  private buildRequestOptions(customOptions: any = {}): object {\n    const httpHeaders: HttpHeaders = this.buildHttpHeaders(customOptions.headers);\n\n    const requestOptions: object = Object.assign(customOptions, {\n      headers: httpHeaders\n    });\n\n    return Object.assign(this.globalRequestOptions, requestOptions);\n  }\n\n  private _toQueryString(params: any): string {\n    return qs.stringify(params, { arrayFormat: 'brackets' });\n  }\n}\n","import { JsonApiDatastore } from './services/json-api-datastore.service';\n\nexport * from './services/json-api-datastore.service';\n\nexport const PROVIDERS: any[] = [\n  JsonApiDatastore\n];\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { PROVIDERS } from './providers';\n\n@NgModule({\n  providers: [PROVIDERS],\n  exports: [HttpClientModule]\n})\nexport class JsonApiModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["AttributeMetadataIndex"],"mappings":"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"}},"fesm2015":{"code":"import { parseISO } from 'date-fns';\nimport * as _ from 'lodash';\nimport { includes, find } from 'lodash';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpErrorResponse, HttpHeaders, HttpClientModule } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport { of, throwError } from 'rxjs';\nimport * as qs from 'qs';\nimport 'reflect-metadata';\n\nclass JsonApiNestedModel {\n    constructor(data) {\n        this.nestedDataSerialization = false;\n        if (data) {\n            Object.assign(this, data);\n        }\n    }\n    get modelConfig() {\n        return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n    }\n    fill(data) {\n        Object.assign(this, data);\n    }\n    serialize() {\n        return this.transformSerializedNamesToPropertyNames();\n    }\n    transformSerializedNamesToPropertyNames() {\n        const serializedNameToPropertyName = this.getModelPropertyNames();\n        const properties = {};\n        Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n            if (this && this[serializedName] !== null &&\n                this[serializedName] !== undefined && serializedName !== 'nestedDataSerialization') {\n                properties[serializedNameToPropertyName[serializedName]] = this[serializedName];\n            }\n        });\n        return properties;\n    }\n    getModelPropertyNames() {\n        return Reflect.getMetadata('AttributeMapping', this) || [];\n    }\n}\n\nconst DEFAULT_OPTIONS = {\n    nullValue: false,\n    hasMany: false\n};\nclass JsonModelConverter {\n    constructor(model, options = {}) {\n        this.modelType = model; // <ModelType<T>>model\n        this.options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    }\n    mask(value) {\n        if (!value && !this.options.nullValue) {\n            if (this.options.hasMany) {\n                return [];\n            }\n            return new this.modelType();\n        }\n        let result = null;\n        if (this.options.hasMany) {\n            if (!Array.isArray(value)) {\n                throw new Error(`ERROR: JsonModelConverter: Expected array but got ${typeof value}.`);\n            }\n            result = [];\n            for (const item of value) {\n                if (item === null) {\n                    continue;\n                }\n                let temp;\n                if (typeof item === 'object') {\n                    temp = new this.modelType();\n                    temp.fill(item);\n                }\n                else {\n                    temp = item;\n                }\n                result.push(temp);\n            }\n        }\n        else {\n            if (!(value instanceof this.modelType)) {\n                result = new this.modelType();\n                result.fill(value);\n            }\n            else {\n                result = value;\n            }\n        }\n        return result;\n    }\n    unmask(value) {\n        if (!value) {\n            return value;\n        }\n        let result = null;\n        if (Array.isArray(value)) {\n            result = [];\n            for (const item of value) {\n                if (!item) {\n                    continue;\n                }\n                if (item instanceof JsonApiNestedModel) {\n                    item.nestedDataSerialization = true;\n                    result.push(item.serialize());\n                    item.nestedDataSerialization = false;\n                }\n                else {\n                    result.push(item);\n                }\n            }\n        }\n        else {\n            if (value instanceof JsonApiNestedModel) {\n                value.nestedDataSerialization = true;\n                result = value.serialize();\n                value.nestedDataSerialization = false;\n            }\n            else {\n                result = value;\n            }\n        }\n        return result;\n    }\n}\n\nfunction HasMany(config = {}) {\n    return (target, propertyName) => {\n        const annotations = Reflect.getMetadata('HasMany', target) || [];\n        annotations.push({\n            propertyName,\n            relationship: config.key || propertyName\n        });\n        Reflect.defineMetadata('HasMany', annotations, target);\n    };\n}\n\nfunction BelongsTo(config = {}) {\n    return (target, propertyName) => {\n        const annotations = Reflect.getMetadata('BelongsTo', target) || [];\n        annotations.push({\n            propertyName,\n            relationship: config.key || propertyName\n        });\n        Reflect.defineMetadata('BelongsTo', annotations, target);\n    };\n}\n\n// tslint:disable-next-line:variable-name\nconst AttributeMetadata = Symbol('AttributeMetadata');\n\nclass DateConverter {\n    mask(value) {\n        if (typeof value === 'string') {\n            return parseISO(value);\n        }\n        else {\n            return value;\n        }\n    }\n    unmask(value) {\n        if (value === null) {\n            return null;\n        }\n        return value.toISOString();\n    }\n}\n\nfunction Attribute(options = {}) {\n    return (target, propertyName) => {\n        const converter = (dataType, value, forSerialisation = false) => {\n            let attrConverter;\n            if (options.converter) {\n                attrConverter = options.converter;\n            }\n            else if (dataType === Date) {\n                attrConverter = new DateConverter();\n            }\n            else {\n                const datatype = new dataType();\n                if (datatype.mask && datatype.unmask) {\n                    attrConverter = datatype;\n                }\n            }\n            if (attrConverter) {\n                if (!forSerialisation) {\n                    return attrConverter.mask(value);\n                }\n                return attrConverter.unmask(value);\n            }\n            return value;\n        };\n        const saveAnnotations = () => {\n            const metadata = Reflect.getMetadata('Attribute', target) || {};\n            metadata[propertyName] = {\n                marked: true\n            };\n            Reflect.defineMetadata('Attribute', metadata, target);\n            const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n            const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n            mappingMetadata[serializedPropertyName] = propertyName;\n            Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n        };\n        const setMetadata = (instance, oldValue, newValue) => {\n            const targetType = Reflect.getMetadata('design:type', target, propertyName);\n            if (!instance[AttributeMetadata]) {\n                instance[AttributeMetadata] = {};\n            }\n            instance[AttributeMetadata][propertyName] = {\n                newValue,\n                oldValue,\n                nested: false,\n                serializedName: options.serializedName,\n                hasDirtyAttributes: !_.isEqual(oldValue, newValue),\n                serialisationValue: converter(targetType, newValue, true)\n            };\n        };\n        const getter = function () {\n            return this[`_${propertyName}`];\n        };\n        const setter = function (newVal) {\n            const targetType = Reflect.getMetadata('design:type', target, propertyName);\n            const convertedValue = converter(targetType, newVal);\n            let oldValue = null;\n            if (this.isModelInitialization() && this.id) {\n                oldValue = converter(targetType, newVal);\n            }\n            else {\n                if (this[AttributeMetadata] && this[AttributeMetadata][propertyName]) {\n                    oldValue = this[AttributeMetadata][propertyName].oldValue;\n                }\n            }\n            this[`_${propertyName}`] = convertedValue;\n            setMetadata(this, oldValue, convertedValue);\n        };\n        if (delete target[propertyName]) {\n            saveAnnotations();\n            Object.defineProperty(target, propertyName, {\n                get: getter,\n                set: setter,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    };\n}\n\nfunction NestedAttribute(options = {}) {\n    return (target, propertyName) => {\n        const converter = (dataType, value, forSerialisation = false) => {\n            let attrConverter;\n            if (options.converter) {\n                attrConverter = options.converter;\n            }\n            else {\n                const datatype = new dataType();\n                if (datatype.mask && datatype.unmask) {\n                    attrConverter = datatype;\n                }\n            }\n            if (attrConverter) {\n                if (!forSerialisation) {\n                    return attrConverter.mask(value);\n                }\n                return attrConverter.unmask(value);\n            }\n            return value;\n        };\n        const saveAnnotations = () => {\n            const metadata = Reflect.getMetadata('NestedAttribute', target) || {};\n            metadata[propertyName] = {\n                marked: true\n            };\n            Reflect.defineMetadata('NestedAttribute', metadata, target);\n            const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n            const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n            mappingMetadata[serializedPropertyName] = propertyName;\n            Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n        };\n        const updateMetadata = (instance) => {\n            const newValue = instance[`_${propertyName}`];\n            if (!instance[AttributeMetadata]) {\n                instance[AttributeMetadata] = {};\n            }\n            if (instance[AttributeMetadata][propertyName] && !instance.isModelInitialization()) {\n                instance[AttributeMetadata][propertyName].newValue = newValue;\n                instance[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(instance[AttributeMetadata][propertyName].oldValue, newValue);\n                instance[AttributeMetadata][propertyName].serialisationValue = newValue;\n            }\n            else {\n                const oldValue = _.cloneDeep(newValue);\n                instance[AttributeMetadata][propertyName] = {\n                    newValue,\n                    oldValue,\n                    converter,\n                    nested: true,\n                    hasDirtyAttributes: !_.isEqual(newValue, oldValue)\n                };\n            }\n        };\n        const getter = function () {\n            return this[`_${propertyName}`];\n        };\n        const setter = function (newVal) {\n            const targetType = Reflect.getMetadata('design:type', target, propertyName);\n            this[`_${propertyName}`] = converter(targetType, newVal);\n            updateMetadata(this);\n        };\n        if (delete target[propertyName]) {\n            saveAnnotations();\n            Object.defineProperty(target, propertyName, {\n                get: getter,\n                set: setter,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    };\n}\n\nfunction JsonAttribute(options = {}) {\n    return (target, propertyName) => {\n        const converter = (dataType, value, forSerialisation = false) => {\n            let attrConverter;\n            if (options.converter) {\n                attrConverter = options.converter;\n            }\n            else if (dataType === Date) {\n                attrConverter = new DateConverter();\n            }\n            else {\n                const datatype = new dataType();\n                if (datatype.mask && datatype.unmask) {\n                    attrConverter = datatype;\n                }\n            }\n            if (attrConverter) {\n                if (!forSerialisation) {\n                    return attrConverter.mask(value);\n                }\n                return attrConverter.unmask(value);\n            }\n            return value;\n        };\n        const saveAnnotations = () => {\n            const metadata = Reflect.getMetadata('JsonAttribute', target) || {};\n            metadata[propertyName] = {\n                marked: true\n            };\n            Reflect.defineMetadata('JsonAttribute', metadata, target);\n            const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n            const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n            mappingMetadata[serializedPropertyName] = propertyName;\n            Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n        };\n        const getter = function () {\n            if (this.nestedDataSerialization) {\n                return converter(Reflect.getMetadata('design:type', target, propertyName), this[`_${propertyName}`], true);\n            }\n            return this[`_${propertyName}`];\n        };\n        const setter = function (newVal) {\n            const targetType = Reflect.getMetadata('design:type', target, propertyName);\n            this[`_${propertyName}`] = converter(targetType, newVal);\n        };\n        if (delete target[propertyName]) {\n            saveAnnotations();\n            Object.defineProperty(target, propertyName, {\n                get: getter,\n                set: setter,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    };\n}\n\nclass JsonApiMetaModel {\n    constructor(response) {\n        this.links = response.links || [];\n        this.meta = response.meta;\n    }\n}\n\nfunction JsonApiModelConfig(config) {\n    return (target) => {\n        if (typeof config.meta === 'undefined' || config.meta == null) {\n            config.meta = JsonApiMetaModel;\n        }\n        Reflect.defineMetadata('JsonApiModelConfig', config, target);\n    };\n}\n\nfunction JsonApiDatastoreConfig(config = {}) {\n    return (target) => {\n        Reflect.defineMetadata('JsonApiDatastoreConfig', config, target);\n    };\n}\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex$1 = AttributeMetadata;\nclass JsonApiModel {\n    constructor(internalDatastore, data) {\n        this.internalDatastore = internalDatastore;\n        this.modelInitialization = false;\n        if (data) {\n            this.modelInitialization = true;\n            this.id = data.id;\n            Object.assign(this, data.attributes);\n            this.modelInitialization = false;\n        }\n    }\n    isModelInitialization() {\n        return this.modelInitialization;\n    }\n    syncRelationships(data, included, remainingModels) {\n        if (this.lastSyncModels === included) {\n            return;\n        }\n        if (data) {\n            let modelsForProcessing = remainingModels;\n            if (modelsForProcessing === undefined) {\n                modelsForProcessing = [].concat(included);\n            }\n            this.parseHasMany(data, included, modelsForProcessing);\n            this.parseBelongsTo(data, included, modelsForProcessing);\n        }\n        this.lastSyncModels = included;\n    }\n    save(params, headers, customUrl) {\n        this.checkChanges();\n        const attributesMetadata = this[AttributeMetadataIndex$1];\n        return this.internalDatastore.saveRecord(attributesMetadata, this, params, headers, customUrl);\n    }\n    get hasDirtyAttributes() {\n        this.checkChanges();\n        const attributesMetadata = this[AttributeMetadataIndex$1];\n        let hasDirtyAttributes = false;\n        for (const propertyName in attributesMetadata) {\n            if (attributesMetadata.hasOwnProperty(propertyName)) {\n                const metadata = attributesMetadata[propertyName];\n                if (metadata.hasDirtyAttributes) {\n                    hasDirtyAttributes = true;\n                    break;\n                }\n            }\n        }\n        return hasDirtyAttributes;\n    }\n    checkChanges() {\n        const attributesMetadata = this[AttributeMetadata];\n        for (const propertyName in attributesMetadata) {\n            if (attributesMetadata.hasOwnProperty(propertyName)) {\n                const metadata = attributesMetadata[propertyName];\n                if (metadata.nested) {\n                    this[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(attributesMetadata[propertyName].oldValue, attributesMetadata[propertyName].newValue);\n                    this[AttributeMetadata][propertyName].serialisationValue = attributesMetadata[propertyName].converter(Reflect.getMetadata('design:type', this, propertyName), _.cloneDeep(attributesMetadata[propertyName].newValue), true);\n                }\n            }\n        }\n    }\n    rollbackAttributes() {\n        const attributesMetadata = this[AttributeMetadataIndex$1];\n        for (const propertyName in attributesMetadata) {\n            if (attributesMetadata.hasOwnProperty(propertyName)) {\n                if (attributesMetadata[propertyName].hasDirtyAttributes) {\n                    this[propertyName] = _.cloneDeep(attributesMetadata[propertyName].oldValue);\n                }\n            }\n        }\n    }\n    get modelConfig() {\n        return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n    }\n    parseHasMany(data, included, remainingModels) {\n        const hasMany = Reflect.getMetadata('HasMany', this);\n        if (hasMany) {\n            for (const metadata of hasMany) {\n                const relationship = data.relationships ? data.relationships[metadata.relationship] : null;\n                if (relationship && relationship.data && Array.isArray(relationship.data)) {\n                    let allModels = [];\n                    const modelTypesFetched = [];\n                    for (const typeIndex of Object.keys(relationship.data)) {\n                        const typeName = relationship.data[typeIndex].type;\n                        if (!includes(modelTypesFetched, typeName)) {\n                            modelTypesFetched.push(typeName);\n                            // tslint:disable-next-line:max-line-length\n                            const modelType = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n                            if (modelType) {\n                                const relationshipModels = this.getHasManyRelationship(modelType, relationship.data, included, typeName, remainingModels);\n                                if (relationshipModels.length > 0) {\n                                    allModels = allModels.concat(relationshipModels);\n                                }\n                            }\n                            else {\n                                throw { message: `parseHasMany - Model type for relationship ${typeName} not found.` };\n                            }\n                        }\n                    }\n                    this[metadata.propertyName] = allModels;\n                }\n            }\n        }\n    }\n    parseBelongsTo(data, included, remainingModels) {\n        const belongsTo = Reflect.getMetadata('BelongsTo', this);\n        if (belongsTo) {\n            for (const metadata of belongsTo) {\n                const relationship = data.relationships ? data.relationships[metadata.relationship] : null;\n                if (relationship && relationship.data) {\n                    const dataRelationship = (relationship.data instanceof Array) ? relationship.data[0] : relationship.data;\n                    if (dataRelationship) {\n                        const typeName = dataRelationship.type;\n                        // tslint:disable-next-line:max-line-length\n                        const modelType = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n                        if (modelType) {\n                            const relationshipModel = this.getBelongsToRelationship(modelType, dataRelationship, included, typeName, remainingModels);\n                            if (relationshipModel) {\n                                this[metadata.propertyName] = relationshipModel;\n                            }\n                        }\n                        else {\n                            throw { message: `parseBelongsTo - Model type for relationship ${typeName} not found.` };\n                        }\n                    }\n                }\n            }\n        }\n    }\n    getHasManyRelationship(modelType, data, included, typeName, remainingModels) {\n        const relationshipList = [];\n        data.forEach((item) => {\n            const relationshipData = find(included, { id: item.id, type: typeName });\n            if (relationshipData) {\n                const newObject = this.createOrPeek(modelType, relationshipData);\n                const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n                const modelsForProcessing = remainingModels.concat([]);\n                if (indexOfNewlyFoundModel !== -1) {\n                    modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n                    newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n                }\n                relationshipList.push(newObject);\n            }\n        });\n        return relationshipList;\n    }\n    getBelongsToRelationship(modelType, data, included, typeName, remainingModels) {\n        const id = data.id;\n        const relationshipData = find(included, { id, type: typeName });\n        if (relationshipData) {\n            const newObject = this.createOrPeek(modelType, relationshipData);\n            const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n            const modelsForProcessing = remainingModels.concat([]);\n            if (indexOfNewlyFoundModel !== -1) {\n                modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n                newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n            }\n            return newObject;\n        }\n        return this.internalDatastore.peekRecord(modelType, id);\n    }\n    createOrPeek(modelType, data) {\n        const peek = this.internalDatastore.peekRecord(modelType, data.id);\n        if (peek) {\n            _.extend(peek, this.internalDatastore.transformSerializedNamesToPropertyNames(modelType, data.attributes));\n            return peek;\n        }\n        const newObject = this.internalDatastore.deserializeModel(modelType, data);\n        this.internalDatastore.addToStore(newObject);\n        return newObject;\n    }\n}\n\nclass ErrorResponse {\n    constructor(errors) {\n        this.errors = [];\n        if (errors) {\n            this.errors = errors;\n        }\n    }\n}\n\nclass JsonApiQueryData {\n    constructor(jsonApiModels, metaData) {\n        this.jsonApiModels = jsonApiModels;\n        this.metaData = metaData;\n    }\n    getModels() {\n        return this.jsonApiModels;\n    }\n    getMeta() {\n        return this.metaData;\n    }\n}\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex = AttributeMetadata;\nclass JsonApiDatastore {\n    constructor(http) {\n        this.http = http;\n        this.globalRequestOptions = {};\n        this.internalStore = {};\n        this.toQueryString = this.datastoreConfig.overrides\n            && this.datastoreConfig.overrides.toQueryString ?\n            this.datastoreConfig.overrides.toQueryString : this._toQueryString;\n    }\n    set headers(headers) {\n        this.globalHeaders = headers;\n    }\n    set requestOptions(requestOptions) {\n        this.globalRequestOptions = requestOptions;\n    }\n    get datastoreConfig() {\n        const configFromDecorator = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor);\n        return Object.assign(configFromDecorator, this.config);\n    }\n    get getDirtyAttributes() {\n        if (this.datastoreConfig.overrides\n            && this.datastoreConfig.overrides.getDirtyAttributes) {\n            return this.datastoreConfig.overrides.getDirtyAttributes;\n        }\n        return JsonApiDatastore.getDirtyAttributes;\n    }\n    static getDirtyAttributes(attributesMetadata) {\n        const dirtyData = {};\n        for (const propertyName in attributesMetadata) {\n            if (attributesMetadata.hasOwnProperty(propertyName)) {\n                const metadata = attributesMetadata[propertyName];\n                if (metadata.hasDirtyAttributes) {\n                    const attributeName = metadata.serializedName != null ? metadata.serializedName : propertyName;\n                    dirtyData[attributeName] = metadata.serialisationValue ? metadata.serialisationValue : metadata.newValue;\n                }\n            }\n        }\n        return dirtyData;\n    }\n    /**\n     * @deprecated use findAll method to take all models\n     */\n    query(modelType, params, headers, customUrl) {\n        const requestHeaders = this.buildHttpHeaders(headers);\n        const url = this.buildUrl(modelType, params, undefined, customUrl);\n        return this.http.get(url, { headers: requestHeaders })\n            .pipe(map((res) => this.extractQueryData(res, modelType)), catchError((res) => this.handleError(res)));\n    }\n    findAll(modelType, params, headers, customUrl) {\n        const url = this.buildUrl(modelType, params, undefined, customUrl);\n        const requestOptions = this.buildRequestOptions({ headers, observe: 'response' });\n        return this.http.get(url, requestOptions)\n            .pipe(map((res) => this.extractQueryData(res, modelType, true)), catchError((res) => this.handleError(res)));\n    }\n    findRecord(modelType, id, params, headers, customUrl) {\n        const requestOptions = this.buildRequestOptions({ headers, observe: 'response' });\n        const url = this.buildUrl(modelType, params, id, customUrl);\n        return this.http.get(url, requestOptions)\n            .pipe(map((res) => this.extractRecordData(res, modelType)), catchError((res) => this.handleError(res)));\n    }\n    createRecord(modelType, data) {\n        return new modelType(this, { attributes: data });\n    }\n    saveRecord(attributesMetadata, model, params, headers, customUrl) {\n        const modelType = model.constructor;\n        const modelConfig = model.modelConfig;\n        const typeName = modelConfig.type;\n        const relationships = this.getRelationships(model);\n        const url = this.buildUrl(modelType, params, model.id, customUrl);\n        let httpCall;\n        const body = {\n            data: {\n                relationships,\n                type: typeName,\n                id: model.id,\n                attributes: this.getDirtyAttributes(attributesMetadata, model)\n            }\n        };\n        const requestOptions = this.buildRequestOptions({ headers, observe: 'response' });\n        if (model.id) {\n            httpCall = this.http.patch(url, body, requestOptions);\n        }\n        else {\n            httpCall = this.http.post(url, body, requestOptions);\n        }\n        return httpCall\n            .pipe(map((res) => [200, 201].indexOf(res.status) !== -1 ? this.extractRecordData(res, modelType, model) : model), catchError((res) => {\n            if (res == null) {\n                return of(model);\n            }\n            return this.handleError(res);\n        }), map((res) => this.updateRelationships(res, relationships)));\n    }\n    deleteRecord(modelType, id, headers, customUrl) {\n        const requestOptions = this.buildRequestOptions({ headers });\n        const url = this.buildUrl(modelType, null, id, customUrl);\n        return this.http.delete(url, requestOptions)\n            .pipe(catchError((res) => this.handleError(res)));\n    }\n    peekRecord(modelType, id) {\n        const type = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n        return this.internalStore[type] ? this.internalStore[type][id] : null;\n    }\n    peekAll(modelType) {\n        const type = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n        const typeStore = this.internalStore[type];\n        return typeStore ? Object.keys(typeStore).map((key) => typeStore[key]) : [];\n    }\n    deserializeModel(modelType, data) {\n        data.attributes = this.transformSerializedNamesToPropertyNames(modelType, data.attributes);\n        return new modelType(this, data);\n    }\n    addToStore(modelOrModels) {\n        const models = Array.isArray(modelOrModels) ? modelOrModels : [modelOrModels];\n        const type = models[0].modelConfig.type;\n        let typeStore = this.internalStore[type];\n        if (!typeStore) {\n            typeStore = this.internalStore[type] = {};\n        }\n        for (const model of models) {\n            typeStore[model.id] = model;\n        }\n    }\n    transformSerializedNamesToPropertyNames(modelType, attributes) {\n        const serializedNameToPropertyName = this.getModelPropertyNames(modelType.prototype);\n        const properties = {};\n        Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n            if (attributes && attributes[serializedName] !== null && attributes[serializedName] !== undefined) {\n                properties[serializedNameToPropertyName[serializedName]] = attributes[serializedName];\n            }\n        });\n        return properties;\n    }\n    buildUrl(modelType, params, id, customUrl) {\n        // TODO: use HttpParams instead of appending a string to the url\n        const queryParams = this.toQueryString(params);\n        if (customUrl) {\n            return queryParams ? `${customUrl}?${queryParams}` : customUrl;\n        }\n        const modelConfig = Reflect.getMetadata('JsonApiModelConfig', modelType);\n        const baseUrl = modelConfig.baseUrl || this.datastoreConfig.baseUrl;\n        const apiVersion = modelConfig.apiVersion || this.datastoreConfig.apiVersion;\n        const modelEndpointUrl = modelConfig.modelEndpointUrl || modelConfig.type;\n        const url = [baseUrl, apiVersion, modelEndpointUrl, id].filter((x) => x).join('/');\n        return queryParams ? `${url}?${queryParams}` : url;\n    }\n    getRelationships(data) {\n        let relationships;\n        const belongsToMetadata = Reflect.getMetadata('BelongsTo', data) || [];\n        const hasManyMetadata = Reflect.getMetadata('HasMany', data) || [];\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                if (data[key] instanceof JsonApiModel) {\n                    relationships = relationships || {};\n                    if (data[key].id) {\n                        const entity = belongsToMetadata.find((it) => it.propertyName === key);\n                        const relationshipKey = entity.relationship;\n                        relationships[relationshipKey] = {\n                            data: this.buildSingleRelationshipData(data[key])\n                        };\n                    }\n                }\n                else if (data[key] instanceof Array) {\n                    const entity = hasManyMetadata.find((it) => it.propertyName === key);\n                    if (entity && this.isValidToManyRelation(data[key])) {\n                        relationships = relationships || {};\n                        const relationshipKey = entity.relationship;\n                        const relationshipData = data[key]\n                            .filter((model) => model.id)\n                            .map((model) => this.buildSingleRelationshipData(model));\n                        relationships[relationshipKey] = {\n                            data: relationshipData\n                        };\n                    }\n                }\n                else if (data[key] === null) {\n                    const entity = belongsToMetadata.find((entity) => entity.propertyName === key);\n                    if (entity) {\n                        relationships = relationships || {};\n                        relationships[entity.relationship] = {\n                            data: null\n                        };\n                    }\n                }\n            }\n        }\n        return relationships;\n    }\n    isValidToManyRelation(objects) {\n        if (!objects.length) {\n            return true;\n        }\n        const isJsonApiModel = objects.every((item) => item instanceof JsonApiModel);\n        if (!isJsonApiModel) {\n            return false;\n        }\n        const types = objects.map((item) => item.modelConfig.modelEndpointUrl || item.modelConfig.type);\n        return types\n            .filter((type, index, self) => self.indexOf(type) === index)\n            .length === 1;\n    }\n    buildSingleRelationshipData(model) {\n        const relationshipType = model.modelConfig.type;\n        const relationShipData = { type: relationshipType };\n        if (model.id) {\n            relationShipData.id = model.id;\n        }\n        else {\n            const attributesMetadata = Reflect.getMetadata('Attribute', model);\n            relationShipData.attributes = this.getDirtyAttributes(attributesMetadata, model);\n        }\n        return relationShipData;\n    }\n    extractQueryData(response, modelType, withMeta = false) {\n        const body = response.body;\n        const models = [];\n        body.data.forEach((data) => {\n            const model = this.deserializeModel(modelType, data);\n            this.addToStore(model);\n            if (body.included) {\n                model.syncRelationships(data, body.included.concat(data));\n                this.addToStore(model);\n            }\n            models.push(model);\n        });\n        if (withMeta && withMeta === true) {\n            return new JsonApiQueryData(models, this.parseMeta(body, modelType));\n        }\n        return models;\n    }\n    extractRecordData(res, modelType, model) {\n        const body = res.body;\n        // Error in Angular < 5.2.4 (see https://github.com/angular/angular/issues/20744)\n        // null is converted to 'null', so this is temporary needed to make testcase possible\n        // (and to avoid a decrease of the coverage)\n        if (!body || body === 'null') {\n            throw new Error('no body in response');\n        }\n        if (!body.data) {\n            if (res.status === 201 || !model) {\n                throw new Error('expected data in response');\n            }\n            return model;\n        }\n        if (model) {\n            model.modelInitialization = true;\n            model.id = body.data.id;\n            Object.assign(model, body.data.attributes);\n            model.modelInitialization = false;\n        }\n        const deserializedModel = model || this.deserializeModel(modelType, body.data);\n        this.addToStore(deserializedModel);\n        if (body.included) {\n            deserializedModel.syncRelationships(body.data, body.included);\n            this.addToStore(deserializedModel);\n        }\n        return deserializedModel;\n    }\n    handleError(error) {\n        if (error instanceof HttpErrorResponse &&\n            error.error instanceof Object &&\n            error.error.errors &&\n            error.error.errors instanceof Array) {\n            const errors = new ErrorResponse(error.error.errors);\n            return throwError(errors);\n        }\n        return throwError(error);\n    }\n    parseMeta(body, modelType) {\n        const metaModel = Reflect.getMetadata('JsonApiModelConfig', modelType).meta;\n        return new metaModel(body);\n    }\n    /**\n     * @deprecated use buildHttpHeaders method to build request headers\n     */\n    getOptions(customHeaders) {\n        return {\n            headers: this.buildHttpHeaders(customHeaders),\n        };\n    }\n    buildHttpHeaders(customHeaders) {\n        let requestHeaders = new HttpHeaders({\n            Accept: 'application/vnd.api+json',\n            'Content-Type': 'application/vnd.api+json'\n        });\n        if (this.globalHeaders) {\n            this.globalHeaders.keys().forEach((key) => {\n                if (this.globalHeaders.has(key)) {\n                    requestHeaders = requestHeaders.set(key, this.globalHeaders.get(key));\n                }\n            });\n        }\n        if (customHeaders) {\n            customHeaders.keys().forEach((key) => {\n                if (customHeaders.has(key)) {\n                    requestHeaders = requestHeaders.set(key, customHeaders.get(key));\n                }\n            });\n        }\n        return requestHeaders;\n    }\n    resetMetadataAttributes(res, attributesMetadata, modelType) {\n        for (const propertyName in attributesMetadata) {\n            if (attributesMetadata.hasOwnProperty(propertyName)) {\n                const metadata = attributesMetadata[propertyName];\n                if (metadata.hasDirtyAttributes) {\n                    metadata.hasDirtyAttributes = false;\n                }\n            }\n        }\n        // @ts-ignore\n        res[AttributeMetadataIndex] = attributesMetadata;\n        return res;\n    }\n    updateRelationships(model, relationships) {\n        const modelsTypes = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor).models;\n        for (const relationship in relationships) {\n            if (relationships.hasOwnProperty(relationship) && model.hasOwnProperty(relationship) && model[relationship]) {\n                const relationshipModel = model[relationship];\n                const hasMany = Reflect.getMetadata('HasMany', relationshipModel);\n                const propertyHasMany = find(hasMany, (property) => {\n                    return modelsTypes[property.relationship] === model.constructor;\n                });\n                if (propertyHasMany) {\n                    relationshipModel[propertyHasMany.propertyName] = relationshipModel[propertyHasMany.propertyName] || [];\n                    const indexOfModel = relationshipModel[propertyHasMany.propertyName].indexOf(model);\n                    if (indexOfModel === -1) {\n                        relationshipModel[propertyHasMany.propertyName].push(model);\n                    }\n                    else {\n                        relationshipModel[propertyHasMany.propertyName][indexOfModel] = model;\n                    }\n                }\n            }\n        }\n        return model;\n    }\n    getModelPropertyNames(model) {\n        return Reflect.getMetadata('AttributeMapping', model) || [];\n    }\n    buildRequestOptions(customOptions = {}) {\n        const httpHeaders = this.buildHttpHeaders(customOptions.headers);\n        const requestOptions = Object.assign(customOptions, {\n            headers: httpHeaders\n        });\n        return Object.assign(this.globalRequestOptions, requestOptions);\n    }\n    _toQueryString(params) {\n        return qs.stringify(params, { arrayFormat: 'brackets' });\n    }\n}\n/** @nocollapse */ JsonApiDatastore.ɵfac = function JsonApiDatastore_Factory(t) { return new (t || JsonApiDatastore)(i0.ɵɵinject(i1.HttpClient)); };\n/** @nocollapse */ JsonApiDatastore.ɵprov = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjectable({ token: JsonApiDatastore, factory: JsonApiDatastore.ɵfac });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JsonApiDatastore, [{\n            type: Injectable\n        }], function () { return [{ type: i1.HttpClient }]; }, null);\n})();\n\nconst PROVIDERS = [\n    JsonApiDatastore\n];\n\nclass JsonApiModule {\n}\n/** @nocollapse */ JsonApiModule.ɵfac = function JsonApiModule_Factory(t) { return new (t || JsonApiModule)(); };\n/** @nocollapse */ JsonApiModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: JsonApiModule });\n/** @nocollapse */ JsonApiModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({ providers: [PROVIDERS], imports: [HttpClientModule] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JsonApiModule, [{\n            type: NgModule,\n            args: [{\n                    providers: [PROVIDERS],\n                    exports: [HttpClientModule]\n                }]\n        }], null, null);\n})();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(JsonApiModule, { exports: [HttpClientModule] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Attribute, BelongsTo, DEFAULT_OPTIONS, ErrorResponse, HasMany, JsonApiDatastore, JsonApiDatastoreConfig, JsonApiMetaModel, JsonApiModel, JsonApiModelConfig, JsonApiModule, JsonApiNestedModel, JsonApiQueryData, JsonAttribute, JsonModelConverter, NestedAttribute, PROVIDERS };\n//# sourceMappingURL=angular2-jsonapi.mjs.map\n","map":{"version":3,"file":"angular2-jsonapi.mjs","sources":["../../../projects/angular2-jsonapi/src/models/json-nested.model.ts","../../../projects/angular2-jsonapi/src/converters/json-model/json-model.converter.ts","../../../projects/angular2-jsonapi/src/decorators/has-many.decorator.ts","../../../projects/angular2-jsonapi/src/decorators/belongs-to.decorator.ts","../../../projects/angular2-jsonapi/src/constants/symbols.ts","../../../projects/angular2-jsonapi/src/converters/date/date.converter.ts","../../../projects/angular2-jsonapi/src/decorators/attribute.decorator.ts","../../../projects/angular2-jsonapi/src/decorators/nested-attribute.decorator.ts","../../../projects/angular2-jsonapi/src/decorators/json-attribute.decorator.ts","../../../projects/angular2-jsonapi/src/models/json-api-meta.model.ts","../../../projects/angular2-jsonapi/src/decorators/json-api-model-config.decorator.ts","../../../projects/angular2-jsonapi/src/decorators/json-api-datastore-config.decorator.ts","../../../projects/angular2-jsonapi/src/models/json-api.model.ts","../../../projects/angular2-jsonapi/src/models/error-response.model.ts","../../../projects/angular2-jsonapi/src/models/json-api-query-data.ts","../../../projects/angular2-jsonapi/src/services/json-api-datastore.service.ts","../../../projects/angular2-jsonapi/src/providers.ts","../../../projects/angular2-jsonapi/src/module.ts","../../../projects/angular2-jsonapi/src/angular2-jsonapi.ts"],"sourcesContent":["import { ModelConfig } from '../interfaces/model-config.interface';\nimport { JsonApiModel } from './json-api.model';\n\nexport class JsonApiNestedModel {\n  [key: string]: any;\n\n  public nestedDataSerialization = false;\n\n  constructor(data?: any) {\n    if (data) {\n      Object.assign(this, data);\n    }\n  }\n\n  get modelConfig(): ModelConfig {\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n  }\n\n  public fill(data: any) {\n    Object.assign(this, data);\n  }\n\n  public serialize(): any {\n    return this.transformSerializedNamesToPropertyNames();\n  }\n\n  protected transformSerializedNamesToPropertyNames<T extends JsonApiModel>() {\n    const serializedNameToPropertyName = this.getModelPropertyNames();\n    const properties: any = {};\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n      if (this && this[serializedName] !== null &&\n        this[serializedName] !== undefined && serializedName !== 'nestedDataSerialization') {\n        properties[serializedNameToPropertyName[serializedName]] = this[serializedName];\n      }\n    });\n\n    return properties;\n  }\n\n  protected getModelPropertyNames() {\n    return Reflect.getMetadata('AttributeMapping', this) || [];\n  }\n}\n","import { JsonModelConverterConfig } from '../../interfaces/json-model-converter-config.interface';\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\nimport { JsonApiNestedModel } from '../../models/json-nested.model';\n\nexport const DEFAULT_OPTIONS: JsonModelConverterConfig = {\n  nullValue: false,\n  hasMany: false\n};\n\nexport class JsonModelConverter<T> implements PropertyConverter {\n  private modelType: any; // ModelType<T>\n  private options: JsonModelConverterConfig;\n\n  constructor(model: T, options: JsonModelConverterConfig = {}) {\n    this.modelType = model; // <ModelType<T>>model\n    this.options = {...DEFAULT_OPTIONS, ...options};\n  }\n\n  mask(value: any): T | Array<T> {\n    if (!value && !this.options.nullValue) {\n      if (this.options.hasMany) {\n        return [];\n      }\n      return new this.modelType();\n    }\n\n    let result = null;\n    if (this.options.hasMany) {\n      if (!Array.isArray(value)) {\n        throw new Error(`ERROR: JsonModelConverter: Expected array but got ${typeof value}.`);\n      }\n      result = [];\n      for (const item of value) {\n        if (item === null) {\n          continue;\n        }\n        let temp;\n        if (typeof item === 'object') {\n          temp = new this.modelType();\n          temp.fill(item);\n        } else {\n          temp = item;\n        }\n\n        result.push(temp);\n      }\n    } else {\n      if (!(value instanceof this.modelType)) {\n        result = new this.modelType();\n        result.fill(value);\n      } else {\n        result = value;\n      }\n    }\n    return result;\n  }\n\n  unmask(value: any): any {\n    if (!value) {\n      return value;\n    }\n    let result = null;\n    if (Array.isArray(value)) {\n      result = [];\n      for (const item of value) {\n        if (!item) {\n          continue;\n        }\n        if (item instanceof JsonApiNestedModel) {\n          item.nestedDataSerialization = true;\n          result.push(item.serialize());\n          item.nestedDataSerialization = false;\n        } else {\n          result.push(item);\n        }\n      }\n    } else {\n      if (value instanceof JsonApiNestedModel) {\n        value.nestedDataSerialization = true;\n        result = value.serialize();\n        value.nestedDataSerialization = false;\n      } else {\n        result = value;\n      }\n    }\n    return result;\n  }\n}\n","export function HasMany(config: any = {}) {\n  return (target: any, propertyName: string | symbol) => {\n    const annotations = Reflect.getMetadata('HasMany', target) || [];\n\n    annotations.push({\n      propertyName,\n      relationship: config.key || propertyName\n    });\n\n    Reflect.defineMetadata('HasMany', annotations, target);\n  };\n}\n","export function BelongsTo(config: any = {}) {\n  return (target: any, propertyName: string | symbol) => {\n    const annotations = Reflect.getMetadata('BelongsTo', target) || [];\n\n    annotations.push({\n      propertyName,\n      relationship: config.key || propertyName\n    });\n\n    Reflect.defineMetadata('BelongsTo', annotations, target);\n  };\n}\n","// tslint:disable-next-line:variable-name\nexport const AttributeMetadata = Symbol('AttributeMetadata') as any;\n","import { parseISO } from 'date-fns';\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\n\nexport class DateConverter implements PropertyConverter {\n  mask(value: any) {\n    if (typeof value === 'string') {\n      return parseISO(value);\n    } else {\n      return value;\n    }\n  }\n\n  unmask(value: any) {\n    if (value === null) {\n      return null;\n    }\n    return value.toISOString();\n  }\n}\n","import { AttributeMetadata } from '../constants/symbols';\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport { DateConverter } from '../converters/date/date.converter';\nimport * as _ from 'lodash';\n\nexport function Attribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else if (dataType === Date) {\n        attrConverter = new DateConverter();\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('Attribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('Attribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const setMetadata = (\n      instance: any,\n      oldValue: any,\n      newValue: any\n    ) => {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n\n      if (!instance[AttributeMetadata]) {\n        instance[AttributeMetadata] = {};\n      }\n      instance[AttributeMetadata][propertyName] = {\n        newValue,\n        oldValue,\n        nested: false,\n        serializedName: options.serializedName,\n        hasDirtyAttributes: !_.isEqual(oldValue, newValue),\n        serialisationValue: converter(targetType, newValue, true)\n      };\n    };\n\n    const getter = function() {\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      const convertedValue = converter(targetType, newVal);\n      let oldValue = null;\n      if (this.isModelInitialization() && this.id) {\n        oldValue = converter(targetType, newVal);\n      } else {\n        if (this[AttributeMetadata] && this[AttributeMetadata][propertyName]) {\n          oldValue = this[AttributeMetadata][propertyName].oldValue;\n        }\n      }\n\n      this[`_${propertyName}`] = convertedValue;\n      setMetadata(this, oldValue, convertedValue);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n","import { AttributeMetadata } from '../constants/symbols';\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport * as _ from 'lodash';\n\nexport function NestedAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('NestedAttribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('NestedAttribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const updateMetadata = (instance: any) => {\n      const newValue = instance[`_${propertyName}`];\n\n      if (!instance[AttributeMetadata]) {\n        instance[AttributeMetadata] = {};\n      }\n      if (instance[AttributeMetadata][propertyName] && !instance.isModelInitialization()) {\n        instance[AttributeMetadata][propertyName].newValue = newValue;\n        instance[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\n          instance[AttributeMetadata][propertyName].oldValue,\n          newValue\n        );\n        instance[AttributeMetadata][propertyName].serialisationValue = newValue;\n      } else {\n        const oldValue = _.cloneDeep(newValue);\n        instance[AttributeMetadata][propertyName] = {\n          newValue,\n          oldValue,\n          converter,\n          nested: true,\n          hasDirtyAttributes: !_.isEqual(newValue, oldValue)\n        };\n      }\n    };\n\n    const getter = function() {\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      this[`_${propertyName}`] = converter(targetType, newVal);\n      updateMetadata(this);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n\n    }\n  };\n}\n","import { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport { DateConverter } from '../converters/date/date.converter';\n\nexport function JsonAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else if (dataType === Date) {\n        attrConverter = new DateConverter();\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('JsonAttribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('JsonAttribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const getter = function() {\n      if (this.nestedDataSerialization) {\n        return converter(Reflect.getMetadata('design:type', target, propertyName), this[`_${propertyName}`], true);\n      }\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      this[`_${propertyName}`] = converter(targetType, newVal);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n","export type MetaModelType<T> = new(response: any) => T;\n\nexport class JsonApiMetaModel {\n  public links: Array<any>;\n  public meta: any;\n\n  constructor(response: any) {\n    this.links = response.links || [];\n    this.meta = response.meta;\n  }\n}\n","import { JsonApiMetaModel } from '../models/json-api-meta.model';\nimport { ModelConfig } from '../interfaces/model-config.interface';\n\nexport function JsonApiModelConfig(config: ModelConfig) {\n  return (target: any) => {\n    if (typeof config.meta === 'undefined' || config.meta == null) {\n      config.meta = JsonApiMetaModel;\n    }\n\n    Reflect.defineMetadata('JsonApiModelConfig', config, target);\n  };\n}\n","export function JsonApiDatastoreConfig(config: any = {}) {\n  return (target: any) => {\n    Reflect.defineMetadata('JsonApiDatastoreConfig', config, target);\n  };\n}\n","import { find, includes } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { JsonApiDatastore, ModelType } from '../services/json-api-datastore.service';\nimport { ModelConfig } from '../interfaces/model-config.interface';\nimport * as _ from 'lodash';\nimport { AttributeMetadata } from '../constants/symbols';\nimport { HttpHeaders } from '@angular/common/http';\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\n\nexport class JsonApiModel {\n  id: string;\n  public modelInitialization = false;\n\n  [key: string]: any;\n\n  lastSyncModels: Array<any>;\n\n  constructor(private internalDatastore: JsonApiDatastore, data?: any) {\n    if (data) {\n      this.modelInitialization = true;\n      this.id = data.id;\n      Object.assign(this, data.attributes);\n      this.modelInitialization = false;\n    }\n  }\n\n  public isModelInitialization(): boolean {\n    return this.modelInitialization;\n  }\n\n  public syncRelationships(data: any, included: any, remainingModels?: Array<any>): void {\n    if (this.lastSyncModels === included) {\n      return;\n    }\n\n    if (data) {\n      let modelsForProcessing = remainingModels;\n\n      if (modelsForProcessing === undefined) {\n        modelsForProcessing = [].concat(included);\n      }\n\n      this.parseHasMany(data, included, modelsForProcessing);\n      this.parseBelongsTo(data, included, modelsForProcessing);\n    }\n\n    this.lastSyncModels = included;\n  }\n\n  public save(params?: any, headers?: HttpHeaders, customUrl?: string): Observable<this> {\n    this.checkChanges();\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    return this.internalDatastore.saveRecord(attributesMetadata, this, params, headers, customUrl);\n  }\n\n  get hasDirtyAttributes() {\n    this.checkChanges();\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    let hasDirtyAttributes = false;\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n        if (metadata.hasDirtyAttributes) {\n          hasDirtyAttributes = true;\n          break;\n        }\n      }\n    }\n    return hasDirtyAttributes;\n  }\n\n  private checkChanges() {\n    const attributesMetadata: any = this[AttributeMetadata];\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n        if (metadata.nested) {\n          this[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\n            attributesMetadata[propertyName].oldValue,\n            attributesMetadata[propertyName].newValue\n          );\n          this[AttributeMetadata][propertyName].serialisationValue = attributesMetadata[propertyName].converter(\n            Reflect.getMetadata('design:type', this, propertyName),\n            _.cloneDeep(attributesMetadata[propertyName].newValue),\n            true\n          );\n        }\n      }\n    }\n  }\n\n  public rollbackAttributes(): void {\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        if (attributesMetadata[propertyName].hasDirtyAttributes) {\n          this[propertyName] = _.cloneDeep(attributesMetadata[propertyName].oldValue);\n        }\n      }\n    }\n  }\n\n  get modelConfig(): ModelConfig {\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n  }\n\n  private parseHasMany(data: any, included: any, remainingModels: Array<any>): void {\n    const hasMany: any = Reflect.getMetadata('HasMany', this);\n\n    if (hasMany) {\n      for (const metadata of hasMany) {\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\n\n        if (relationship && relationship.data && Array.isArray(relationship.data)) {\n          let allModels: JsonApiModel[] = [];\n          const modelTypesFetched: any = [];\n\n          for (const typeIndex of Object.keys(relationship.data)) {\n            const typeName: string = relationship.data[typeIndex].type;\n\n            if (!includes(modelTypesFetched, typeName)) {\n              modelTypesFetched.push(typeName);\n              // tslint:disable-next-line:max-line-length\n              const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n\n              if (modelType) {\n                const relationshipModels: JsonApiModel[] = this.getHasManyRelationship(\n                  modelType,\n                  relationship.data,\n                  included,\n                  typeName,\n                  remainingModels\n                );\n\n                if (relationshipModels.length > 0) {\n                  allModels = allModels.concat(relationshipModels);\n                }\n              } else {\n                throw { message: `parseHasMany - Model type for relationship ${typeName} not found.` };\n              }\n            }\n          }\n\n          this[metadata.propertyName] = allModels;\n        }\n      }\n    }\n  }\n\n  private parseBelongsTo(data: any, included: Array<any>, remainingModels: Array<any>): void {\n    const belongsTo: any = Reflect.getMetadata('BelongsTo', this);\n\n    if (belongsTo) {\n      for (const metadata of belongsTo) {\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\n        if (relationship && relationship.data) {\n          const dataRelationship: any = (relationship.data instanceof Array) ? relationship.data[0] : relationship.data;\n          if (dataRelationship) {\n            const typeName: string = dataRelationship.type;\n            // tslint:disable-next-line:max-line-length\n            const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n\n            if (modelType) {\n              const relationshipModel = this.getBelongsToRelationship(\n                modelType,\n                dataRelationship,\n                included,\n                typeName,\n                remainingModels\n              );\n\n              if (relationshipModel) {\n                this[metadata.propertyName] = relationshipModel;\n              }\n            } else {\n              throw { message: `parseBelongsTo - Model type for relationship ${typeName} not found.` };\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private getHasManyRelationship<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    data: any,\n    included: any,\n    typeName: string,\n    remainingModels: Array<any>\n  ): Array<T> {\n    const relationshipList: Array<T> = [];\n\n    data.forEach((item: any) => {\n      const relationshipData: any = find(included, { id: item.id, type: typeName } as any);\n\n      if (relationshipData) {\n        const newObject: T = this.createOrPeek(modelType, relationshipData);\n\n        const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n        const modelsForProcessing = remainingModels.concat([]);\n\n        if (indexOfNewlyFoundModel !== -1) {\n          modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n          newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n        }\n\n        relationshipList.push(newObject);\n      }\n    });\n\n    return relationshipList;\n  }\n\n  private getBelongsToRelationship<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    data: any,\n    included: Array<any>,\n    typeName: string,\n    remainingModels: Array<any>\n  ): T | null {\n    const id: string = data.id;\n\n    const relationshipData: any = find(included, { id, type: typeName } as any);\n\n    if (relationshipData) {\n      const newObject: T = this.createOrPeek(modelType, relationshipData);\n\n      const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n      const modelsForProcessing = remainingModels.concat([]);\n\n      if (indexOfNewlyFoundModel !== -1) {\n        modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n        newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n      }\n\n      return newObject;\n    }\n\n    return this.internalDatastore.peekRecord(modelType, id);\n  }\n\n  private createOrPeek<T extends JsonApiModel>(modelType: ModelType<T>, data: any): T {\n    const peek = this.internalDatastore.peekRecord(modelType, data.id);\n\n    if (peek) {\n      _.extend(peek, this.internalDatastore.transformSerializedNamesToPropertyNames(modelType, data.attributes));\n      return peek;\n    }\n\n    const newObject: T = this.internalDatastore.deserializeModel(modelType, data);\n    this.internalDatastore.addToStore(newObject);\n\n    return newObject;\n  }\n}\n","export interface JsonApiError {\n  id?: string;\n  links?: Array<any>;\n  status?: string;\n  code?: string;\n  title?: string;\n  detail?: string;\n  source?: {\n    pointer?: string;\n    parameter?: string\n  };\n  meta?: any;\n}\n\nexport class ErrorResponse {\n  errors?: JsonApiError[] = [];\n\n  constructor(errors ?: JsonApiError[]) {\n    if (errors) {\n      this.errors = errors;\n    }\n  }\n}\n","export class JsonApiQueryData<T> {\n  constructor(protected jsonApiModels: Array<T>, protected metaData?: any) {\n  }\n\n  public getModels(): T[] {\n    return this.jsonApiModels;\n  }\n\n  public getMeta(): any {\n    return this.metaData;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { find } from 'lodash';\nimport { catchError, map } from 'rxjs/operators';\nimport { Observable, of, throwError } from 'rxjs';\nimport { JsonApiModel } from '../models/json-api.model';\nimport { ErrorResponse } from '../models/error-response.model';\nimport { JsonApiQueryData } from '../models/json-api-query-data';\nimport * as qs from 'qs';\nimport { DatastoreConfig } from '../interfaces/datastore-config.interface';\nimport { ModelConfig } from '../interfaces/model-config.interface';\nimport { AttributeMetadata } from '../constants/symbols';\nimport 'reflect-metadata';\n\nexport type ModelType<T extends JsonApiModel> = new (datastore: JsonApiDatastore, data: any) => T;\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\n\n@Injectable()\nexport class JsonApiDatastore {\n\n  protected config: DatastoreConfig;\n  private globalHeaders: HttpHeaders;\n  private globalRequestOptions: object = {};\n  private internalStore: { [type: string]: { [id: string]: JsonApiModel } } = {};\n  private toQueryString: (params: any) => string = this.datastoreConfig.overrides\n    && this.datastoreConfig.overrides.toQueryString ?\n    this.datastoreConfig.overrides.toQueryString : this._toQueryString;\n\n  constructor(protected http: HttpClient) {\n  }\n\n  set headers(headers: HttpHeaders) {\n    this.globalHeaders = headers;\n  }\n\n  set requestOptions(requestOptions: object) {\n    this.globalRequestOptions = requestOptions;\n  }\n\n  public get datastoreConfig(): DatastoreConfig {\n    const configFromDecorator: DatastoreConfig = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor);\n    return Object.assign(configFromDecorator, this.config);\n  }\n\n  private get getDirtyAttributes() {\n    if (this.datastoreConfig.overrides\n      && this.datastoreConfig.overrides.getDirtyAttributes) {\n      return this.datastoreConfig.overrides.getDirtyAttributes;\n    }\n    return JsonApiDatastore.getDirtyAttributes;\n  }\n\n  private static getDirtyAttributes(attributesMetadata: any): { string: any } {\n    const dirtyData: any = {};\n\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n\n        if (metadata.hasDirtyAttributes) {\n          const attributeName = metadata.serializedName != null ? metadata.serializedName : propertyName;\n          dirtyData[attributeName] = metadata.serialisationValue ? metadata.serialisationValue : metadata.newValue;\n        }\n      }\n    }\n    return dirtyData;\n  }\n\n  /**\n   * @deprecated use findAll method to take all models\n   */\n  query<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T[]> {\n    const requestHeaders: HttpHeaders = this.buildHttpHeaders(headers);\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\n    return this.http.get(url, { headers: requestHeaders })\n      .pipe(\n        map((res: any) => this.extractQueryData(res, modelType)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public findAll<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<JsonApiQueryData<T>> {\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\n    const requestOptions: object = this.buildRequestOptions({ headers, observe: 'response' });\n\n    return this.http.get(url, requestOptions)\n      .pipe(\n        map((res: HttpResponse<object>) => this.extractQueryData(res, modelType, true)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public findRecord<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    id: string,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T> {\n    const requestOptions: object = this.buildRequestOptions({ headers, observe: 'response' });\n    const url: string = this.buildUrl(modelType, params, id, customUrl);\n\n    return this.http.get(url, requestOptions)\n      .pipe(\n        map((res: HttpResponse<object>) => this.extractRecordData(res, modelType)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public createRecord<T extends JsonApiModel>(modelType: ModelType<T>, data?: any): T {\n    return new modelType(this, { attributes: data });\n  }\n\n  public saveRecord<T extends JsonApiModel>(\n    attributesMetadata: any,\n    model: T,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T> {\n    const modelType = model.constructor as ModelType<T>;\n    const modelConfig: ModelConfig = model.modelConfig;\n    const typeName: string = modelConfig.type;\n    const relationships: any = this.getRelationships(model);\n    const url: string = this.buildUrl(modelType, params, model.id, customUrl);\n\n    let httpCall: Observable<HttpResponse<object>>;\n    const body: any = {\n      data: {\n        relationships,\n        type: typeName,\n        id: model.id,\n        attributes: this.getDirtyAttributes(attributesMetadata, model)\n      }\n    };\n\n    const requestOptions: object = this.buildRequestOptions({ headers, observe: 'response' });\n\n    if (model.id) {\n      httpCall = this.http.patch<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\n    } else {\n      httpCall = this.http.post<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\n    }\n\n    return httpCall\n      .pipe(\n        map((res) => [200, 201].indexOf(res.status) !== -1 ? this.extractRecordData(res, modelType, model) : model),\n        catchError((res) => {\n          if (res == null) {\n            return of(model);\n          }\n          return this.handleError(res);\n        }),\n        map((res) => this.updateRelationships(res, relationships))\n      );\n  }\n\n  public deleteRecord<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    id: string,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<Response> {\n    const requestOptions: object = this.buildRequestOptions({ headers });\n    const url: string = this.buildUrl(modelType, null, id, customUrl);\n\n    return this.http.delete(url, requestOptions)\n      .pipe(\n        catchError((res: HttpErrorResponse) => this.handleError(res))\n      );\n  }\n\n  public peekRecord<T extends JsonApiModel>(modelType: ModelType<T>, id: string): T | null {\n    const type: string = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n    return this.internalStore[type] ? this.internalStore[type][id] as T : null;\n  }\n\n  public peekAll<T extends JsonApiModel>(modelType: ModelType<T>): Array<T> {\n    const type = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n    const typeStore = this.internalStore[type];\n    return typeStore ? Object.keys(typeStore).map((key) => typeStore[key] as T) : [];\n  }\n\n  public deserializeModel<T extends JsonApiModel>(modelType: ModelType<T>, data: any) {\n    data.attributes = this.transformSerializedNamesToPropertyNames(modelType, data.attributes);\n    return new modelType(this, data);\n  }\n\n  public addToStore(modelOrModels: JsonApiModel | JsonApiModel[]): void {\n    const models = Array.isArray(modelOrModels) ? modelOrModels : [modelOrModels];\n    const type: string = models[0].modelConfig.type;\n    let typeStore = this.internalStore[type];\n\n    if (!typeStore) {\n      typeStore = this.internalStore[type] = {};\n    }\n\n    for (const model of models) {\n      typeStore[model.id] = model;\n    }\n  }\n\n  public transformSerializedNamesToPropertyNames<T extends JsonApiModel>(modelType: ModelType<T>, attributes: any) {\n    const serializedNameToPropertyName = this.getModelPropertyNames(modelType.prototype);\n    const properties: any = {};\n\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n      if (attributes && attributes[serializedName] !== null && attributes[serializedName] !== undefined) {\n        properties[serializedNameToPropertyName[serializedName]] = attributes[serializedName];\n      }\n    });\n\n    return properties;\n  }\n\n  protected buildUrl<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    id?: string,\n    customUrl?: string\n  ): string {\n    // TODO: use HttpParams instead of appending a string to the url\n    const queryParams: string = this.toQueryString(params);\n\n    if (customUrl) {\n      return queryParams ? `${customUrl}?${queryParams}` : customUrl;\n    }\n\n    const modelConfig: ModelConfig = Reflect.getMetadata('JsonApiModelConfig', modelType);\n\n    const baseUrl = modelConfig.baseUrl || this.datastoreConfig.baseUrl;\n    const apiVersion = modelConfig.apiVersion || this.datastoreConfig.apiVersion;\n    const modelEndpointUrl: string = modelConfig.modelEndpointUrl || modelConfig.type;\n\n    const url: string = [baseUrl, apiVersion, modelEndpointUrl, id].filter((x) => x).join('/');\n\n    return queryParams ? `${url}?${queryParams}` : url;\n  }\n\n  protected getRelationships(data: any): any {\n    let relationships: any;\n\n    const belongsToMetadata: any[] = Reflect.getMetadata('BelongsTo', data) || [];\n    const hasManyMetadata: any[] = Reflect.getMetadata('HasMany', data) || [];\n\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        if (data[key] instanceof JsonApiModel) {\n          relationships = relationships || {};\n\n          if (data[key].id) {\n            const entity = belongsToMetadata.find((it: any) => it.propertyName === key);\n            const relationshipKey = entity.relationship;\n            relationships[relationshipKey] = {\n              data: this.buildSingleRelationshipData(data[key])\n            };\n          }\n        } else if (data[key] instanceof Array) {\n          const entity = hasManyMetadata.find((it: any) => it.propertyName === key);\n          if (entity && this.isValidToManyRelation(data[key])) {\n            relationships = relationships || {};\n\n            const relationshipKey = entity.relationship;\n            const relationshipData = data[key]\n              .filter((model: JsonApiModel) => model.id)\n              .map((model: JsonApiModel) => this.buildSingleRelationshipData(model));\n\n            relationships[relationshipKey] = {\n              data: relationshipData\n            };\n          }\n        } else if (data[key] === null) {\n          const entity = belongsToMetadata.find((entity: any) => entity.propertyName === key);\n\n          if (entity) {\n            relationships = relationships || {};\n\n            relationships[entity.relationship] = {\n              data: null\n            };\n          }\n        }\n      }\n    }\n\n    return relationships;\n  }\n\n  protected isValidToManyRelation(objects: Array<any>): boolean {\n    if (!objects.length) {\n      return true;\n    }\n    const isJsonApiModel = objects.every((item) => item instanceof JsonApiModel);\n    if (!isJsonApiModel) {\n      return false;\n    }\n    const types = objects.map((item: JsonApiModel) => item.modelConfig.modelEndpointUrl || item.modelConfig.type);\n    return types\n      .filter((type: string, index: number, self: string[]) => self.indexOf(type) === index)\n      .length === 1;\n  }\n\n  protected buildSingleRelationshipData(model: JsonApiModel): any {\n    const relationshipType: string = model.modelConfig.type;\n    const relationShipData: { type: string, id?: string, attributes?: any } = { type: relationshipType };\n\n    if (model.id) {\n      relationShipData.id = model.id;\n    } else {\n      const attributesMetadata: any = Reflect.getMetadata('Attribute', model);\n      relationShipData.attributes = this.getDirtyAttributes(attributesMetadata, model);\n    }\n\n    return relationShipData;\n  }\n\n  protected extractQueryData<T extends JsonApiModel>(\n    response: HttpResponse<object>,\n    modelType: ModelType<T>,\n    withMeta = false\n  ): Array<T> | JsonApiQueryData<T> {\n    const body: any = response.body;\n    const models: T[] = [];\n\n    body.data.forEach((data: any) => {\n      const model: T = this.deserializeModel(modelType, data);\n      this.addToStore(model);\n\n      if (body.included) {\n        model.syncRelationships(data, body.included.concat(data));\n        this.addToStore(model);\n      }\n\n      models.push(model);\n    });\n\n    if (withMeta && withMeta === true) {\n      return new JsonApiQueryData(models, this.parseMeta(body, modelType));\n    }\n\n    return models;\n  }\n\n  protected extractRecordData<T extends JsonApiModel>(\n    res: HttpResponse<object>,\n    modelType: ModelType<T>,\n    model?: T\n  ): T {\n    const body: any = res.body;\n    // Error in Angular < 5.2.4 (see https://github.com/angular/angular/issues/20744)\n    // null is converted to 'null', so this is temporary needed to make testcase possible\n    // (and to avoid a decrease of the coverage)\n    if (!body || body === 'null') {\n      throw new Error('no body in response');\n    }\n\n    if (!body.data) {\n      if (res.status === 201 || !model) {\n        throw new Error('expected data in response');\n      }\n      return model;\n    }\n\n    if (model) {\n      model.modelInitialization = true;\n      model.id = body.data.id;\n      Object.assign(model, body.data.attributes);\n      model.modelInitialization = false;\n    }\n\n    const deserializedModel = model || this.deserializeModel(modelType, body.data);\n    this.addToStore(deserializedModel);\n    if (body.included) {\n      deserializedModel.syncRelationships(body.data, body.included);\n      this.addToStore(deserializedModel);\n    }\n\n    return deserializedModel;\n  }\n\n  protected handleError(error: any): Observable<any> {\n    if (\n      error instanceof HttpErrorResponse &&\n      error.error instanceof Object &&\n      error.error.errors &&\n      error.error.errors instanceof Array\n    ) {\n      const errors: ErrorResponse = new ErrorResponse(error.error.errors);\n      return throwError(errors);\n    }\n\n    return throwError(error);\n  }\n\n  protected parseMeta(body: any, modelType: ModelType<JsonApiModel>): any {\n    const metaModel: any = Reflect.getMetadata('JsonApiModelConfig', modelType).meta;\n    return new metaModel(body);\n  }\n\n  /**\n   * @deprecated use buildHttpHeaders method to build request headers\n   */\n  protected getOptions(customHeaders?: HttpHeaders): any {\n    return {\n      headers: this.buildHttpHeaders(customHeaders),\n    };\n  }\n\n  protected buildHttpHeaders(customHeaders?: HttpHeaders): HttpHeaders {\n    let requestHeaders: HttpHeaders = new HttpHeaders({\n      Accept: 'application/vnd.api+json',\n      'Content-Type': 'application/vnd.api+json'\n    });\n\n    if (this.globalHeaders) {\n      this.globalHeaders.keys().forEach((key) => {\n        if (this.globalHeaders.has(key)) {\n          requestHeaders = requestHeaders.set(key, this.globalHeaders.get(key));\n        }\n      });\n    }\n\n    if (customHeaders) {\n      customHeaders.keys().forEach((key) => {\n        if (customHeaders.has(key)) {\n          requestHeaders = requestHeaders.set(key, customHeaders.get(key));\n        }\n      });\n    }\n\n    return requestHeaders;\n  }\n\n  protected resetMetadataAttributes<T extends JsonApiModel>(res: T, attributesMetadata: any, modelType: ModelType<T>) {\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n\n        if (metadata.hasDirtyAttributes) {\n          metadata.hasDirtyAttributes = false;\n        }\n      }\n    }\n\n    // @ts-ignore\n    res[AttributeMetadataIndex] = attributesMetadata;\n    return res;\n  }\n\n  protected updateRelationships<T extends JsonApiModel>(model: T, relationships: any): T {\n    const modelsTypes: any = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor).models;\n\n    for (const relationship in relationships) {\n      if (relationships.hasOwnProperty(relationship) && model.hasOwnProperty(relationship) && model[relationship]) {\n        const relationshipModel: JsonApiModel = model[relationship];\n        const hasMany: any[] = Reflect.getMetadata('HasMany', relationshipModel);\n        const propertyHasMany: any = find(hasMany, (property) => {\n          return modelsTypes[property.relationship] === model.constructor;\n        });\n\n        if (propertyHasMany) {\n          relationshipModel[propertyHasMany.propertyName] = relationshipModel[propertyHasMany.propertyName] || [];\n\n          const indexOfModel = relationshipModel[propertyHasMany.propertyName].indexOf(model);\n\n          if (indexOfModel === -1) {\n            relationshipModel[propertyHasMany.propertyName].push(model);\n          } else {\n            relationshipModel[propertyHasMany.propertyName][indexOfModel] = model;\n          }\n        }\n      }\n    }\n\n    return model;\n  }\n\n  protected getModelPropertyNames(model: JsonApiModel) {\n    return Reflect.getMetadata('AttributeMapping', model) || [];\n  }\n\n  private buildRequestOptions(customOptions: any = {}): object {\n    const httpHeaders: HttpHeaders = this.buildHttpHeaders(customOptions.headers);\n\n    const requestOptions: object = Object.assign(customOptions, {\n      headers: httpHeaders\n    });\n\n    return Object.assign(this.globalRequestOptions, requestOptions);\n  }\n\n  private _toQueryString(params: any): string {\n    return qs.stringify(params, { arrayFormat: 'brackets' });\n  }\n}\n","import { JsonApiDatastore } from './services/json-api-datastore.service';\n\nexport * from './services/json-api-datastore.service';\n\nexport const PROVIDERS: any[] = [\n  JsonApiDatastore\n];\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { PROVIDERS } from './providers';\n\n@NgModule({\n  providers: [PROVIDERS],\n  exports: [HttpClientModule]\n})\nexport class JsonApiModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["AttributeMetadataIndex"],"mappings":"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"}}}